
import {
	XXError
} from './types'

import {
	QUASI_STANDARD_ERROR_FIELDS,
	COMMON_ERROR_FIELDS_EXTENDED,
} from './fields'

export function createError(message: string, details: XXError['details'] = {}) {
	message = String(message || details.message || 'Unknown error!')
	if (!(message.toLowerCase()).includes('error')) {
		message = 'Error: ' + message
	}

	let err: XXError = new Error(message)

	Object.keys(details).forEach(k => {
		// TODO review this!!! UT!!!
		//console.log(k)
		const isErrorAttribute = COMMON_ERROR_FIELDS_EXTENDED.has(k)
		const isAutogeneratedErrorAttribute = QUASI_STANDARD_ERROR_FIELDS.has(k)
		if (isErrorAttribute && !isAutogeneratedErrorAttribute) {
			// attach directly
			;(err as any)[k] = details[k]
		}
		else {
			err.details = err.details || {}
			err.details[k] = details[k]
		}
	})
	err.framesToPop = (err.framesToPop || 0) + 1

	return err
}
