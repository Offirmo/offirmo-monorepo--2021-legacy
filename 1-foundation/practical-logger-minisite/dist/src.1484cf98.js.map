{"version":3,"sources":["../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/consts-base.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/consts.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/normalize-args.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/core.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/index.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/common.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/common.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/firefox.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/chromium.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/safari.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/no-css.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/index.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-browser/src/index.ts","index.ts"],"names":[],"mappings":"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","file":"src.1484cf98.js","sourceRoot":"../src","sourcesContent":["// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\n\nimport { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = 'error'\nexport const DEFAULT_LOGGER_KEY = '' // yes, can be used as a key\n","import { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const LIB = '@offirmo/practical-logger-core'\n\n// level to a numerical value, for ordering and filtering.\n// mnemonic:  100 = 100% = you will see 100% of the logs\n//              1 =   1% = you will see 1% of the logs (obviously the most important)\nexport const LOG_LEVEL_TO_INTEGER: Readonly<{ [k: string]: number }> = {\n\tfatal:    1,\n\temerg:    2,\n\n\talert:   10,\n\tcrit:    20,\n\terror:   30,\n\n\twarning: 40,\n\twarn:    40,\n\n\tnotice:  45,\n\n\tinfo:    50,\n\n\tverbose: 70,\n\tlog:     80,\n\tdebug:   81,\n\n\ttrace:   90,\n\n\tsilly:  100,\n}\n\n// rationalization to a clear, human understandable string\nexport const LOG_LEVEL_TO_HUMAN: Readonly<{ [k: string]: string }> = {\n\tfatal:   'fatal',\n\temerg:   'emergency',\n\n\talert:   'alert',\n\tcrit:    'critical',\n\terror:   'error',\n\n\twarning: 'warn', // warn is a word, shorter is better\n\twarn:    'warn',\n\n\tnotice:  'notice',\n\n\tinfo:    'info',\n\n\tverbose: 'verbose',\n\tlog:     'log',\n\tdebug:   'debug',\n\n\ttrace:   'trace',\n\n\tsilly:   'silly',\n}\n\nexport const ALL_LOG_LEVELS: Readonly<LogLevel[]> =\n\tObject.keys(LOG_LEVEL_TO_INTEGER)\n\t\t.map(s => s as LogLevel)\n\t\t.sort((a: LogLevel, b: LogLevel) => LOG_LEVEL_TO_INTEGER[a] - LOG_LEVEL_TO_INTEGER[b])\n\nexport * from './consts-base'\n","import {\n\tLogDetails,\n} from '@offirmo/practical-logger-types'\n\n\nexport function looksLikeAnError(x: any): boolean {\n\treturn !!(x.name && x.message && x.stack)\n}\n\n// harmonize\n// also try to recover from some common errors\n// TODO assess whether it's really good to be that permissive (also: hurts perfs)\nexport function normalizeArguments(args: IArguments): [ string, LogDetails ] {\n\t//console.log('>>> NA', Array.from(args))\n\n\tlet message: string = ''\n\tlet details: Readonly<LogDetails> = {}\n\tlet err: Error | undefined = undefined\n\n\tif (args.length > 2) {\n\t\t//console.warn('NA 1', args)\n\t\t// wrong invocation,\n\t\t// most likely a \"console.log\" style invocation from an untyped codebase.\n\t\t// \"best effort\" fallback:\n\t\tmessage = Array.prototype.join.call(args, ' ')\n\t\tdetails = {}\n\t}\n\telse {\n\t\t//console.log('NA 2')\n\t\tmessage = args[0] || ''\n\t\tdetails = args[1] || {}\n\n\t\t// optimization\n\t\tif (!message || typeof args[0] !== 'string' || typeof details !== 'object') {\n\t\t\t// non-nominal call\n\t\t\t//console.warn('NA 2.1')\n\n\t\t\t// try to fix message (attempt 1)\n\t\t\tif (typeof message !== 'string') {\n\t\t\t\t//console.warn('NA 2.1.1', { message, details })\n\t\t\t\tif (looksLikeAnError(message)) {\n\t\t\t\t\t//console.warn('NA 2.1.1.1')\n\t\t\t\t\t// Another bad invocation\n\t\t\t\t\t// \"best effort\" fallback:\n\t\t\t\t\terr = message as Error\n\t\t\t\t\tmessage = err.message\n\t\t\t\t}\n\t\t\t\telse if (typeof message === 'object' && !args[1]) {\n\t\t\t\t\t// no message, direct details\n\t\t\t\t\t//console.warn('NA 2.1.1.2')\n\t\t\t\t\tdetails = message as LogDetails\n\t\t\t\t\tmessage = ''\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//console.warn('NA 2.1.1.3')\n\t\t\t\t\tmessage = String(message)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// try to fix details\n\t\t\tif (typeof details !== 'object') {\n\t\t\t\t//console.warn('NA 2.1.2', { details })\n\t\t\t\t// Another bad invocation\n\t\t\t\t// \"best effort\" fallback:\n\t\t\t\tmessage = [ message, String(details) ].join(' ')\n\t\t\t\tdetails = {}\n\t\t\t}\n\n\t\t\t// ensure we picked up err\n\t\t\terr = err || details.err\n\n\t\t\t// attempt to fix message (attempt 2, after uniformizing details)\n\t\t\tif (!message && details.message) {\n\t\t\t\t//console.warn('NA 2.1.3', { details })\n\t\t\t\tconst { message: m2, ...d2 } = details\n\t\t\t\tmessage = m2\n\t\t\t\tdetails = d2\n\t\t\t}\n\n\t\t\tmessage = message || (err && err.message) || '(no message)'\n\t\t}\n\n\t\tif (!err && looksLikeAnError(details)) {\n\t\t\t//console.warn('NA 2.2', { details })\n\t\t\t// details is in fact an error, extract it\n\t\t\terr = details as Error\n\t\t\tdetails = { err }\n\t\t}\n\t\telse if (err)\n\t\t\tdetails = { err, ...details }\n\t\telse\n\t\t\tdetails = { ...details }\n\t}\n\n\treturn [ message, details ]\n}\n\n","import {\n\tLogLevel,\n\tBaseInternalLoggerState,\n\tLogger,\n\tLoggerCreationParams,\n\tLogDetails,\n\tLogPayload,\n\tLogPrimitive,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLIB,\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nimport { normalizeArguments } from './normalize-args'\n\nexport function checkLevel(level: any): asserts level is LogLevel {\n\tif (!ALL_LOG_LEVELS.includes(level))\n\t\tthrow new Error(`[${LIB}] Not a valid log level: \"${level}\"!`)\n}\n\nexport function create(\n\t{\n\t\tname = DEFAULT_LOGGER_KEY,\n\t\tsuggestedLevel = DEFAULT_LOG_LEVEL,\n\t\tforcedLevel,\n\t\tcommonDetails = {},\n\t}: LoggerCreationParams = {},\n\toutputFn: LogSink = console.log,\n): Logger {\n\n\tconst internalState: BaseInternalLoggerState = {\n\t\tname,\n\t\tlevel: forcedLevel || suggestedLevel,\n\t\tcommonDetails: {...commonDetails},\n\t\toutputFn,\n\t}\n\n\tlet levelAsInt = 100 // so far\n\n\tconst logger: Logger = ALL_LOG_LEVELS.reduce(\n\t\t(logger: any, level: LogLevel) => {\n\t\t\tconst primitive: LogPrimitive = function (rawMessage?: string, rawDetails?: LogDetails) {\n\t\t\t\tif (!isLevelEnabled(level)) return\n\n\t\t\t\tconst [ message, details ] = normalizeArguments(arguments)\n\n\t\t\t\tinternalState.outputFn(serializer(level, message, details))\n\t\t\t}\n\n\t\t\tlogger[level] = primitive\n\n\t\t\treturn logger\n\t\t},\n\t\t{\n\t\t\tsetLevel,\n\t\t\tgetLevel,\n\t\t\taddCommonDetails,\n\t\t\tgroup() {},\n\t\t\tgroupCollapsed() {},\n\t\t\tgroupEnd() {},\n\t\t},\n\t)\n\n\tfunction setLevel(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\tinternalState.level = level\n\t\tlevelAsInt = LOG_LEVEL_TO_INTEGER[level]\n\t}\n\tsetLevel(getLevel()) // to check it\n\n\tfunction isLevelEnabled(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\treturn LOG_LEVEL_TO_INTEGER[level] <= levelAsInt\n\t}\n\n\tfunction getLevel() {\n\t\treturn internalState.level\n\t}\n\n\tfunction addCommonDetails(details: Readonly<LogDetails>): void {\n\t\tif (details.err)\n\t\t\tthrow new Error(`[${LIB}] Can't set reserved property \"err\"!`)\n\n\t\tinternalState.commonDetails = {\n\t\t\t...internalState.commonDetails,\n\t\t\t...details,\n\t\t}\n\t}\n\n\tfunction serializer(level: LogLevel, msg: string, { err, ...details }: Readonly<LogDetails>): LogPayload {\n\t\tconst payload: LogPayload = {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tmsg,\n\t\t\ttime: +(new Date()), // UTC timestamp\n\t\t\tdetails: {\n\t\t\t\t...internalState.commonDetails,\n\t\t\t\t...details,\n\t\t\t},\n\t\t}\n\t\tif (err)\n\t\t\tpayload.err = err\n\n\t\treturn payload\n\t}\n\n\treturn logger\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { create as createLogger } from './core'\nexport { createLogger }\n\nexport * from '@offirmo/practical-logger-types'\n\nexport {\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tLOG_LEVEL_TO_HUMAN,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nexport { checkLevel } from './core'\nexport * from './normalize-args'\n\n","import { LogLevel, LOG_LEVEL_TO_HUMAN } from '@offirmo/practical-logger-core'\n\nexport const LEVEL_TO_CONSOLE_METHOD: Readonly<{ [k: string]: string }> = {\n\tfatal:   'error',\n\temerg:   'error',\n\talert:   'error',\n\tcrit:    'error',\n\n\terror:   'error',\n\n\twarning: 'warn',\n\twarn:    'warn',\n\n\tnotice:  'info',\n\tinfo:    'info',\n\tverbose: 'info',\n\n\tlog:     'log',\n\n\tdebug:   'debug',\n\ttrace:   'debug',\n\tsilly:   'debug',\n}\n\n\nconst MIN_WIDTH = 5\nexport function to_uniform_level(level: LogLevel): string {\n\tlet str = LOG_LEVEL_TO_HUMAN[level] //.slice(0, MIN_WIDTH)\n\t//if (str.length < MIN_WIDTH)\n\tstr = (str + '         ').slice(0, MIN_WIDTH)\n\treturn str\n}\n","const FONT_FAMILY_BETTER_PROPORTIONAL = 'font-family: ' + [\n\t'-apple-system',\n\t'BlinkMacSystemFont', // good sans-serif available in blink = Chrome\n\t'noto',\n\t'roboto',\n\t'sans-serif',\n\t//'unset', // default back to the devtools one\n].join(', ')\n\nconst FONT_FAMILY_BETTER_MONOSPACE = 'font-family: ' + [\n\t'\"Fira Code\"',\n\t'Menlo', // default chrome devtools one\n\t'Consolas',\n\t'monospace',\n].join(', ')\n\n\nconst LEVEL_TO_COLOR_STYLE: Readonly<{ [k: string]: string }> = {\n\t// empty = no need, console method already covers it well\n\tfatal:   '',\n\temerg:   '',\n\talert:   '',\n\tcrit:    '',\n\n\terror:   '',\n\n\twarning: '',\n\twarn:    '',\n\n\tnotice:  'color: #659AD2',\n\tinfo:    'color: #659AD2',\n\tverbose: 'color: #659AD2',\n\n\tlog:     '',\n\n\tdebug:   'color: #9AA2AA',\n\ttrace:   'color: #9AA2AA',\n\tsilly:   'color: #9AA2AA',\n}\n\n\nfunction add_styled_string(line: string[], chunk: string, ...styles: string[]): string[] {\n\tconst [ existing_chunks, ...existing_chunks_styles ] = line\n\treturn [\n\t\texisting_chunks + '%c' + chunk,\n\t\t...existing_chunks_styles,\n\t\tstyles.join(';') + ';',\n\t]\n}\n\n\nexport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n}\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 10px'\nexport const sink: LogSink = (payload: LogPayload): void => {\n\tconst { level, name, msg, err, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .35em', 'margin-right: .5em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconst args: any[] = line\n\tif (Object.keys(details).length)\n\t\targs.push(details)\n\t// err should be last because it takes a lot of room and \"hides\" further args\n\tif (err)\n\t\targs.push(err)\n\n\tconsole_method(...args)\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error' || console_method_name === 'warn'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 8px'\nexport const sink: LogSink = (payload: LogPayload): void => {\n\tconst { level, name, msg, err, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .1em', 'margin-right: .2em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconst args: any[] = line\n\tif (Object.keys(details).length)\n\t\targs.push(details)\n\t// err should be last because it takes a lot of room and \"hides\" further args\n\tif (err)\n\t\targs.push(err)\n\n\tconsole_method(...args)\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string, details: any): boolean {\n\treturn details || console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 9px'\nexport const sink: LogSink = (payload: LogPayload): void => {\n\tconst { level, name, msg, err, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name, details)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 10px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .15em', 'margin-right: .4em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconst args: any[] = line\n\tif (Object.keys(details).length)\n\t\targs.push(details)\n\t// err should be last because it takes a lot of room and \"hides\" further args\n\tif (err)\n\t\targs.push(err)\n\n\tconsole_method(...args)\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport { SinkOptions } from '../types'\nimport { LEVEL_TO_CONSOLE_METHOD, to_uniform_level } from './common'\n\n\nexport default function create(options: Readonly<SinkOptions> = {}): LogSink {\n\treturn (payload: LogPayload): void => {\n\t\tconst { level, name, msg, err, details } = payload\n\t\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\t\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\t\tlet line = ['[', to_uniform_level(level), '] ']\n\n\t\tif (name) {\n\t\t\tline.push(`${name} › `)\n\t\t}\n\t\tline.push(msg)\n\n\t\tconst args: any[] = line\n\t\tif (Object.keys(details).length)\n\t\t\targs.push(details)\n\t\t// err should be last because it takes a lot of room and \"hides\" further args\n\t\tif (err)\n\t\t\targs.push(err)\n\n\t\tconsole_method(...args)\n\t}\n}\n","import { LogSink } from '@offirmo/practical-logger-types'\n\nimport { Browser, SinkOptions } from '../types'\nimport sink_firefox from './advanced/firefox'\nimport sink_chromium from './advanced/chromium'\nimport sink_safari from './advanced/safari'\nimport create_sink_no_css from './no-css'\n\nfunction quick_detect_browser(): Browser {\n\t// https://stackoverflow.com/a/9851769/587407\n\t// https://dev.to/_elmahdim/safe-reliable-browser-sniffing-39bp\n\n\ttry {\n\t\tif ((window as any).InstallTrigger)\n\t\t\treturn 'firefox'\n\n\t\tif ((window as any).ApplePaySession)\n\t\t\treturn 'safari'\n\n\t\tif ((window as any).chrome)\n\t\t\treturn 'chromium'\n\t}\n\tcatch {}\n\n\treturn 'other'\n}\n\n\nexport function create(options: Readonly<SinkOptions> = {}): LogSink {\n\tif (options.useCss === false)\n\t\treturn create_sink_no_css(options)\n\n\tswitch(options.explicitBrowser || quick_detect_browser()) {\n\t\tcase 'firefox':\n\t\t\treturn sink_firefox\n\t\tcase 'safari':\n\t\t\treturn sink_safari\n\t\tcase 'chromium':\n\t\t\treturn sink_chromium\n\t\tdefault:\n\t\t\treturn create_sink_no_css(options)\n\t}\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { LogSink, Logger, LoggerCreationParams, LogPayload } from '@offirmo/practical-logger-types'\nimport { createLogger as createLoggerCore, LOG_LEVEL_TO_INTEGER } from '@offirmo/practical-logger-core'\n\nimport { SinkOptions } from './types'\nimport { create } from './sinks'\n\nconst ORIGINAL_CONSOLE = console\n\nfunction createLogger(p: Readonly<LoggerCreationParams<SinkOptions>> = {}): Logger {\n\tconst sink0: LogSink = p.sinkOptions?.sink || create(p.sinkOptions)\n\n\tlet groupDepth = 0;\n\tfunction sink1(payload: LogPayload): void {\n\t\tconst shouldEscapeFromGroupCollapsedToMakeTheErrorVisible = LOG_LEVEL_TO_INTEGER[payload.level] <= 40 && groupDepth > 0\n\t\tif (shouldEscapeFromGroupCollapsedToMakeTheErrorVisible) {\n\t\t\twhile(groupDepth > 0) {\n\t\t\t\tORIGINAL_CONSOLE.groupEnd()\n\t\t\t\tgroupDepth--\n\t\t\t}\n\t\t}\n\t\treturn sink0(payload)\n\t}\n\n\treturn {\n\t\t...createLoggerCore(p, sink1),\n\t\tgroup(groupTitle?: string): void {\n\t\t\tORIGINAL_CONSOLE.group(groupTitle)\n\t\t\tgroupDepth++\n\t\t},\n\t\tgroupCollapsed(groupTitle?: string): void {\n\t\t\tORIGINAL_CONSOLE.groupCollapsed(groupTitle)\n\t\t\tgroupDepth++\n\t\t},\n\t\tgroupEnd(): void {\n\t\t\tORIGINAL_CONSOLE.groupEnd()\n\t\t\tgroupDepth = Math.max(0, groupDepth - 1)\n\t\t}\n\t}\n}\n\n\nexport {\n\tcreateLogger,\n}\nexport * from '@offirmo/practical-logger-types'\n","import { createLogger } from '@offirmo/practical-logger-browser'\n\nconst logger = createLogger()\nlogger.log('hello from logger!')\n\nconst fooLogger = createLogger({\n\tname: 'Foo',\n\tsuggestedLevel: 'silly',\n})\nfooLogger.log('hello from fooLogger!', { bar: 42, baz: 33 })\n"]}