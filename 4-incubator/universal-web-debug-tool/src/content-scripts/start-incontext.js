
// THIS FILE IS AUTO GENERATED!
const lib = "// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
},{}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/typescript-string-enums/dist/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function Enum() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    if (typeof values[0] === "string") {
        var result = {};
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var value = values_1[_a];
            result[value] = value;
        }
        return result;
    }
    else {
        return values[0];
    }
}
exports.Enum = Enum;
(function (Enum) {
    function ofKeys(e) {
        var result = {};
        for (var _i = 0, _a = Object.keys(e); _i < _a.length; _i++) {
            var key = _a[_i];
            result[key] = key;
        }
        return result;
    }
    Enum.ofKeys = ofKeys;
    function keys(e) {
        return Object.keys(e);
    }
    Enum.keys = keys;
    function values(e) {
        var result = [];
        for (var _i = 0, _a = Object.keys(e); _i < _a.length; _i++) {
            var key = _a[_i];
            result.push(e[key]);
        }
        return result;
    }
    Enum.values = values;
    function isType(e, value) {
        return values(e).indexOf(value) !== -1;
    }
    Enum.isType = isType;
})(Enum = exports.Enum || (exports.Enum = {}));

},{}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/types.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_string_enums_1 = require("typescript-string-enums");
///////
const LogLevel = typescript_string_enums_1.Enum('fatal', 'emerg', 'alert', 'crit', 'error', 'warning', 'warn', 'notice', 'info', 'verbose', 'log', 'debug', 'trace', 'silly');
exports.LogLevel = LogLevel;

},{"typescript-string-enums":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/typescript-string-enums/dist/index.js"}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/const.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_string_enums_1 = require("typescript-string-enums");
const types_1 = require("./types");
const LIB = '@offirmo/practical-logger-core';
exports.LIB = LIB;
const ALL_LOG_LEVELS = typescript_string_enums_1.Enum.keys(types_1.LogLevel);
exports.ALL_LOG_LEVELS = ALL_LOG_LEVELS;
// level to a numerical value, for ordering and filtering
const LEVEL_TO_INTEGER = {
    [types_1.LogLevel.fatal]: 60,
    [types_1.LogLevel.emerg]: 59,
    [types_1.LogLevel.alert]: 52,
    [types_1.LogLevel.crit]: 51,
    [types_1.LogLevel.error]: 50,
    [types_1.LogLevel.warning]: 40,
    [types_1.LogLevel.warn]: 40,
    [types_1.LogLevel.notice]: 35,
    [types_1.LogLevel.info]: 30,
    [types_1.LogLevel.verbose]: 22,
    [types_1.LogLevel.log]: 21,
    [types_1.LogLevel.debug]: 20,
    [types_1.LogLevel.trace]: 10,
    [types_1.LogLevel.silly]: 1,
};
exports.LEVEL_TO_INTEGER = LEVEL_TO_INTEGER;
if (Object.keys(LEVEL_TO_INTEGER).length !== typescript_string_enums_1.Enum.keys(types_1.LogLevel).length)
    throw new Error('universal-logger-core: LEVEL_TO_INTEGER needs an update');
// level to short, meaningful string to maybe be displayed on screen
const LEVEL_TO_HUMAN = {
    [types_1.LogLevel.fatal]: 'fatal',
    [types_1.LogLevel.emerg]: 'emergency',
    [types_1.LogLevel.alert]: 'alert',
    [types_1.LogLevel.crit]: 'critical',
    [types_1.LogLevel.error]: 'error',
    [types_1.LogLevel.warning]: 'warn',
    [types_1.LogLevel.warn]: 'warn',
    [types_1.LogLevel.notice]: 'note',
    [types_1.LogLevel.info]: 'info',
    [types_1.LogLevel.verbose]: 'verbose',
    [types_1.LogLevel.log]: 'log',
    [types_1.LogLevel.debug]: 'debug',
    [types_1.LogLevel.trace]: 'trace',
    [types_1.LogLevel.silly]: 'silly',
};
exports.LEVEL_TO_HUMAN = LEVEL_TO_HUMAN;
if (Object.keys(LEVEL_TO_HUMAN).length !== typescript_string_enums_1.Enum.keys(types_1.LogLevel).length)
    throw new Error('universal-logger-core: LEVEL_TO_HUMAN needs an update');

},{"typescript-string-enums":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/typescript-string-enums/dist/index.js","./types":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/types.js"}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/generate.js":[function(require,module,exports) {
"use strict";
/////////////////////
Object.defineProperty(exports, "__esModule", { value: true });
function get_UTC_timestamp_ms(now = new Date()) {
    return (+now);
}
exports.get_UTC_timestamp_ms = get_UTC_timestamp_ms;
/////////////////////
function get_human_readable_UTC_timestamp_days(now = new Date()) {
    const YYYY = now.getUTCFullYear();
    const MM = ('0' + (now.getUTCMonth() + 1)).slice(-2);
    const DD = ('0' + now.getUTCDate()).slice(-2);
    return `${YYYY}${MM}${DD}`;
}
exports.get_human_readable_UTC_timestamp_days = get_human_readable_UTC_timestamp_days;
function get_human_readable_UTC_timestamp_minutes(now = new Date()) {
    const hh = ('0' + now.getUTCHours()).slice(-2);
    const mm = ('0' + now.getUTCMinutes()).slice(-2);
    return get_human_readable_UTC_timestamp_days(now) + `_${hh}h${mm}`;
}
exports.get_human_readable_UTC_timestamp_minutes = get_human_readable_UTC_timestamp_minutes;
function get_human_readable_UTC_timestamp_ms_v1(now = new Date()) {
    const ss = ('0' + now.getUTCSeconds()).slice(-2);
    const mmm = ('00' + now.getUTCMilliseconds()).slice(-3);
    return get_human_readable_UTC_timestamp_minutes(now) + `:${ss}.${mmm}`;
}
exports.get_human_readable_UTC_timestamp_ms_v1 = get_human_readable_UTC_timestamp_ms_v1;
function get_human_readable_UTC_timestamp_ms(now = new Date()) {
    return 'ts1_' + get_human_readable_UTC_timestamp_ms_v1(now);
}
exports.get_human_readable_UTC_timestamp_ms = get_human_readable_UTC_timestamp_ms;
/////////////////////

},{}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/parse.js":[function(require,module,exports) {
"use strict";
/////////////////////
Object.defineProperty(exports, "__esModule", { value: true });
/////////////////////
function parse_human_readable_UTC_timestamp_ms_v1(tstamp) {
    //console.log({tstamp})
    // format: ${YYYY}${MM}${DD}_${hh}h${mm}:${ss}.${mmm}
    if (tstamp.length !== 21)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [wrong length]');
    const [date_part, time_part] = tstamp.split('_');
    //console.log({date_part, time_part})
    if (date_part.length !== 8)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [wrong date length]');
    const YYYY_part = date_part.slice(0, 4);
    const MM_part = date_part.slice(4, 6);
    const DD_part = date_part.slice(6, 8);
    const YYYY = Number(YYYY_part);
    if (YYYY < 1970)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [YYYY]');
    const MM = Number(MM_part) - 1; // stupid spec
    if (MM > 11)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [MM]');
    const DD = Number(DD_part);
    if (DD > 31)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [DD]');
    if (time_part.length !== 12)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [wrong time length]');
    const hh_part = time_part.slice(0, 2);
    const mm_part = time_part.slice(3, 5);
    const ss_part = time_part.slice(6, 8);
    const mmm_part = time_part.slice(9, 12);
    //console.log({YYYY_part, MM_part, DD_part, hh_part, mm_part, ss_part, mmm_part})
    const hh = Number(hh_part);
    if (hh > 23)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [hh]');
    const mm = Number(mm_part);
    if (mm > 59)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [mm]');
    const ss = Number(ss_part);
    if (ss > 59)
        throw new Error('Human-readable timestamp UTC/ms: can’t parse! [ss]');
    const mmm = Number(mmm_part);
    //console.log({YYYY, MM, DD, hh, mm, ss, mmm})
    return new Date(Date.UTC(YYYY, MM, DD, hh, mm, ss, mmm));
}
exports.parse_human_readable_UTC_timestamp_ms_v1 = parse_human_readable_UTC_timestamp_ms_v1;
function parse_human_readable_UTC_timestamp_ms(tstamp) {
    if (tstamp.startsWith('ts1_'))
        return parse_human_readable_UTC_timestamp_ms_v1(tstamp.slice(4));
    throw new Error('wrong timestamp, can’t parse!');
}
exports.parse_human_readable_UTC_timestamp_ms = parse_human_readable_UTC_timestamp_ms;
/////////////////////

},{}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./generate"), exports);
tslib_1.__exportStar(require("./parse"), exports);

},{"tslib":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/tslib/tslib.es6.js","./generate":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/generate.js","./parse":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/parse.js"}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/core.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_string_enums_1 = require("typescript-string-enums");
const timestamps_1 = require("@offirmo/timestamps");
const types_1 = require("./types");
const const_1 = require("./const");
function checkLevel(level) {
    if (!typescript_string_enums_1.Enum.isType(types_1.LogLevel, level))
        throw new Error(`${const_1.LIB}: checkLevel(): Not a valid log level: "${level}"!`);
}
function createLogger({ name, level = types_1.LogLevel.info, details = {}, outputFn = console.log, }) {
    if (!name)
        throw new Error(`${const_1.LIB}.${createLogger.name}(): you must provide a name!`);
    const internalState = {
        name,
        level,
        details: Object.assign({}, details),
        outputFn: outputFn,
    };
    let level_int = 0;
    const logger = const_1.ALL_LOG_LEVELS.reduce((logger, level) => {
        logger[level] = (message, details) => {
            if (!isLevelEnabled(level))
                return;
            if (!details && typeof message === 'object') {
                details = message;
                message = details.err
                    ? details.err.message
                    : '';
            }
            message = message || '';
            outputFn(serializer(level, message, details));
        };
        return logger;
    }, {
        _: internalState,
        isLevelEnabled,
        setLevel,
        getLevel,
        addDetails,
    });
    function setLevel(level) {
        checkLevel(level);
        internalState.level = level;
        level_int = const_1.LEVEL_TO_INTEGER[level];
    }
    setLevel(level);
    function isLevelEnabled(level) {
        checkLevel(level);
        return const_1.LEVEL_TO_INTEGER[level] >= level_int;
    }
    function getLevel() {
        return internalState.level;
    }
    function addDetails(details) {
        internalState.details = Object.assign({}, internalState.details, details);
    }
    // TODO child
    /*
    function child({name, level, details}: Partial<LogParams>): Logger {
        return createChildLogger({
            parent: logger,
            name,
            level,
            details,
        })
    }
    */
    function serializer(level, msg, details) {
        const payload = {
            details: Object.assign({}, internalState.details, details),
            level,
            name,
            time: timestamps_1.get_human_readable_UTC_timestamp_ms_v1(),
            //time: (new Date()).toISOString(),
            msg,
        };
        return payload;
    }
    return logger;
}
exports.createLogger = createLogger;

},{"typescript-string-enums":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/typescript-string-enums/dist/index.js","@offirmo/timestamps":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/timestamps/dist/src.es7.cjs/index.js","./types":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/types.js","./const":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/const.js"}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/child.js":[function(require,module,exports) {
"use strict";
// TODO
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("./core");
function createChildLogger({ parent, name = parent._.name, level = parent.getLevel(), details = {}, outputFn = parent._.outputFn, }) {
    details = Object.assign({}, parent._.details, details);
    return core_1.createLogger({
        name,
        level,
        details,
        outputFn,
    });
}
exports.createChildLogger = createChildLogger;

},{"./core":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/core.js"}],"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./types"), exports);
tslib_1.__exportStar(require("./const"), exports);
tslib_1.__exportStar(require("./core"), exports);
tslib_1.__exportStar(require("./child"), exports);

},{"tslib":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/tslib/tslib.es6.js","./types":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/types.js","./const":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/const.js","./core":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/core.js","./child":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/child.js"}],"../node_modules/@offirmo/practical-logger-browser/dist/src.es7.cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const practical_logger_core_1 = require("@offirmo/practical-logger-core");
exports.createChildLogger = practical_logger_core_1.createChildLogger;
const LEVEL_TO_CONSOLE_METHOD = {
    [practical_logger_core_1.LogLevel.fatal]: 'error',
    [practical_logger_core_1.LogLevel.emerg]: 'error',
    [practical_logger_core_1.LogLevel.alert]: 'error',
    [practical_logger_core_1.LogLevel.crit]: 'error',
    [practical_logger_core_1.LogLevel.error]: 'error',
    [practical_logger_core_1.LogLevel.warning]: 'warn',
    [practical_logger_core_1.LogLevel.warn]: 'warn',
    [practical_logger_core_1.LogLevel.notice]: 'info',
    [practical_logger_core_1.LogLevel.info]: 'info',
    [practical_logger_core_1.LogLevel.verbose]: 'info',
    [practical_logger_core_1.LogLevel.log]: 'log',
    // note: console.debug doesn't display anything on Chrome, don't use it
    [practical_logger_core_1.LogLevel.debug]: 'log',
    [practical_logger_core_1.LogLevel.trace]: 'log',
    [practical_logger_core_1.LogLevel.silly]: 'log',
};
const LEVEL_TO_STYLE = {
    [practical_logger_core_1.LogLevel.fatal]: '',
    [practical_logger_core_1.LogLevel.emerg]: '',
    [practical_logger_core_1.LogLevel.alert]: '',
    [practical_logger_core_1.LogLevel.crit]: '',
    [practical_logger_core_1.LogLevel.error]: '',
    [practical_logger_core_1.LogLevel.warning]: '',
    [practical_logger_core_1.LogLevel.warn]: '',
    [practical_logger_core_1.LogLevel.notice]: 'color: #659AD2',
    [practical_logger_core_1.LogLevel.info]: 'color: #659AD2',
    [practical_logger_core_1.LogLevel.verbose]: 'color: #659AD2',
    [practical_logger_core_1.LogLevel.log]: '',
    [practical_logger_core_1.LogLevel.debug]: '',
    [practical_logger_core_1.LogLevel.trace]: 'color: #9AA2AA',
    [practical_logger_core_1.LogLevel.silly]: 'color: #9AA2AA',
};
function createLogger(p) {
    function outputFn(payload) {
        const { level, name, msg, time, details } = payload;
        //const { err, ...detailsNoErr } = details
        let line = ''
            //+ time
            //+ ' '
            + `%c[${level}]`
            + '›'
            + name
            + ': '
            //+ (msg ? ' ' : '')
            + msg;
        if (Object.keys(details).length)
            console[LEVEL_TO_CONSOLE_METHOD[level]](line, LEVEL_TO_STYLE[level], details);
        else
            console[LEVEL_TO_CONSOLE_METHOD[level]](line, LEVEL_TO_STYLE[level]);
    }
    return practical_logger_core_1.createLogger(Object.assign({}, p, { outputFn }));
}
exports.createLogger = createLogger;

},{"@offirmo/practical-logger-core":"../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/dist/src.es7.cjs/index.js"}],"api/full/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCommand = exports.getLogger = exports.getLogLevel = void 0;

var _practicalLoggerBrowser = require("@offirmo/practical-logger-browser");

console.log("[\uD83E\uDDE9 UWDT/api/full.".concat(+Date.now(), "] Hello!"));

function create() {
  var loggerCache = {};

  function getLogLevel() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';
    return [1, 'silly']; //return [ 100, 'fatal' ]
  }

  function getLogger() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';
    return (0, _practicalLoggerBrowser.createLogger)({
      name: id,
      level: getLogLevel(id)[1]
    });
  }

  function addCommand() {// TODO
  }

  return {
    getLogLevel: getLogLevel,
    getLogger: getLogger,
    addCommand: addCommand
  };
}

var instance = window._debug = function () {
  console.log("[\uD83E\uDDE9 UWDT/api/full.".concat(+Date.now(), "] injecting _debug API..."));
  return create();
}();

var getLogLevel = instance.getLogLevel,
    getLogger = instance.getLogger,
    addCommand = instance.addCommand;
exports.addCommand = addCommand;
exports.getLogger = getLogger;
exports.getLogLevel = getLogLevel;
},{"@offirmo/practical-logger-browser":"../node_modules/@offirmo/practical-logger-browser/dist/src.es7.cjs/index.js"}]},{},["api/full/index.js"], null)
//# sourceMappingURL=/index.map"
export default lib
