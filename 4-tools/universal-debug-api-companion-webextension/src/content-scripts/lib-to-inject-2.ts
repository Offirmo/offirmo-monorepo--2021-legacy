
// THIS FILE IS AUTO GENERATED!
// This is a base64 version of a content script to communicate with UWDT webextension
// bundled in a single file through this local file:
// ../src/injected-libs/universal-debug-api-control.ts
const lib = ''
export default lib
