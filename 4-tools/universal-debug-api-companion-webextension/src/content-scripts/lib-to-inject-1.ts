
// THIS FILE IS AUTO GENERATED!
// This is a base64 version of the Universal Web Debug API:
// https://github.com/Offirmo/offirmo-monorepo/tree/master/3-advanced--multi/universal-debug-api-browser
// bundled in a single file through this local file:
// ../src/injected-libs/universal-debug-api-from-webext.ts
const lib = 'parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"ehj8":[function(require,module,exports) {
var global = arguments[3];
var e=arguments[3];Object.defineProperty(exports,"__esModule",{value:!0}),exports.getGlobalThis=void 0;var o={};function t(){return"undefined"!=typeof globalThis?globalThis:void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==this?this:o}exports.default=t,exports.getGlobalThis=t;
},{}],"bC2m":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEFAULT_LOGGER_KEY=exports.DEFAULT_LOG_LEVEL=void 0,exports.DEFAULT_LOG_LEVEL="error",exports.DEFAULT_LOGGER_KEY="";
},{}],"zg8C":[function(require,module,exports) {
"use strict";var e=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var L=Object.getOwnPropertyDescriptor(r,t);L&&("get"in L?r.__esModule:!L.writable&&!L.configurable)||(L={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,L)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),r=this&&this.__exportStar||function(r,t){for(var o in r)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||e(t,r,o)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LOG_LEVEL_TO_HUMAN=exports.ALL_LOG_LEVELS=exports.LOG_LEVEL_TO_INTEGER=exports.LIB=void 0,exports.LIB="@offirmo/practical-logger-core",exports.LOG_LEVEL_TO_INTEGER={fatal:1,emerg:2,alert:10,crit:20,error:30,warning:40,warn:40,notice:45,info:50,verbose:70,log:80,debug:81,trace:90,silly:100},exports.ALL_LOG_LEVELS=Object.keys(exports.LOG_LEVEL_TO_INTEGER).map(function(e){return e}).sort(function(e,r){return exports.LOG_LEVEL_TO_INTEGER[e]-exports.LOG_LEVEL_TO_INTEGER[r]}),exports.LOG_LEVEL_TO_HUMAN=exports.ALL_LOG_LEVELS.reduce(function(e,r){return e[r]={em:"emergency",wa:"warn"}[r.slice(0,1)]||r,e},{}),r(require("./consts-base"),exports);
},{"./consts-base":"bC2m"}],"rIpC":[function(require,module,exports) {
"use strict";var e=this&&this.__assign||function(){return(e=Object.assign||function(e){for(var r,o=1,t=arguments.length;o<t;o++)for(var n in r=arguments[o])Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);return e}).apply(this,arguments)};function r(e){return!!((null==e?void 0:e.name)&&(null==e?void 0:e.message)&&(null==e?void 0:e.stack))}function o(o){var t=[],n={},s=void 0;Array.from(o).forEach(function(o){o&&(r(o)?s||(s=o):(!s&&r(o.err)&&(s=o.err),"object"!=typeof o?t.push(String(o)):n=e(e({},n),o)))}),"string"!=typeof n.message||t.length||(t.push(n.message),delete n.message);var i=t.join(" ")||(null==s?void 0:s.message)||"(no message)";return s?n.err=s:delete n.err,[i,n]}Object.defineProperty(exports,"__esModule",{value:!0}),exports.normalizeArguments=exports.looksLikeAnError=void 0,exports.looksLikeAnError=r,exports.normalizeArguments=o;
},{}],"m7xv":[function(require,module,exports) {
"use strict";var e=this&&this.__assign||function(){return(e=Object.assign||function(e){for(var r,t=1,o=arguments.length;t<o;t++)for(var n in r=arguments[t])Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);return e}).apply(this,arguments)},r=this&&this.__rest||function(e,r){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&r.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)r.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(t[o[n]]=e[o[n]])}return t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.create=exports.checkLevel=void 0;var t=require("./consts"),o=require("./normalize-args");function n(e){if(!t.ALL_LOG_LEVELS.includes(e))throw new Error("[".concat(t.LIB,'] Not a valid log level: "').concat(e,'"!'))}function i(i,c){var l=void 0===i?{}:i,a=l.name,s=void 0===a?t.DEFAULT_LOGGER_KEY:a,u=l.suggestedLevel,v=void 0===u?t.DEFAULT_LOG_LEVEL:u,L=l.forcedLevel,f=l.commonDetails,p=void 0===f?{}:f;void 0===c&&(c=console.log);var m={name:s,level:L||v,commonDetails:e({},p),outputFn:c},E=100,d=t.ALL_LOG_LEVELS.reduce(function(i,c){return i[c]=function(i,l){if(function(e){return n(e),t.LOG_LEVEL_TO_INTEGER[e]<=E}(c)){var a=(0,o.normalizeArguments)(arguments),u=a[0],v=a[1];m.outputFn(function(t,o,n){var i=n.err,c=r(n,["err"]),l={level:t,name:s,msg:o,time:+new Date,details:e(e({},m.commonDetails),c)};return i&&(l.err=i),l}(c,u,v))}},i},{setLevel:O,getLevel:_,addCommonDetails:function(r){if(r.err)throw new Error("[".concat(t.LIB,'] Can\'t set reserved property "err"!'));m.commonDetails=e(e({},m.commonDetails),r)},group:function(){},groupCollapsed:function(){},groupEnd:function(){}});function O(e){n(e),m.level=e,E=t.LOG_LEVEL_TO_INTEGER[e]}function _(){return m.level}return O(_()),d}exports.checkLevel=n,exports.create=i;
},{"./consts":"zg8C","./normalize-args":"rIpC"}],"Qoo0":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});
},{}],"DITU":[function(require,module,exports) {
"use strict";var e=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var n=Object.getOwnPropertyDescriptor(r,t);n&&("get"in n?r.__esModule:!n.writable&&!n.configurable)||(n={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,n)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),r=this&&this.__exportStar||function(r,t){for(var o in r)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||e(t,r,o)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.checkLevel=exports.DEFAULT_LOGGER_KEY=exports.DEFAULT_LOG_LEVEL=exports.LOG_LEVEL_TO_HUMAN=exports.LOG_LEVEL_TO_INTEGER=exports.ALL_LOG_LEVELS=exports.createLogger=void 0;var t=require("./core");Object.defineProperty(exports,"createLogger",{enumerable:!0,get:function(){return t.create}}),r(require("@offirmo/practical-logger-types"),exports);var o=require("./consts");Object.defineProperty(exports,"ALL_LOG_LEVELS",{enumerable:!0,get:function(){return o.ALL_LOG_LEVELS}}),Object.defineProperty(exports,"LOG_LEVEL_TO_INTEGER",{enumerable:!0,get:function(){return o.LOG_LEVEL_TO_INTEGER}}),Object.defineProperty(exports,"LOG_LEVEL_TO_HUMAN",{enumerable:!0,get:function(){return o.LOG_LEVEL_TO_HUMAN}}),Object.defineProperty(exports,"DEFAULT_LOG_LEVEL",{enumerable:!0,get:function(){return o.DEFAULT_LOG_LEVEL}}),Object.defineProperty(exports,"DEFAULT_LOGGER_KEY",{enumerable:!0,get:function(){return o.DEFAULT_LOGGER_KEY}});var n=require("./core");Object.defineProperty(exports,"checkLevel",{enumerable:!0,get:function(){return n.checkLevel}}),r(require("./normalize-args"),exports);
},{"./core":"m7xv","@offirmo/practical-logger-types":"Qoo0","./consts":"zg8C","./normalize-args":"rIpC"}],"KdUZ":[function(require,module,exports) {
"use strict";function e(e){var t,n=!1;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return n||(t=e.apply(void 0,r),n=!0),t}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.tiny_singleton=void 0,exports.default=e,exports.tiny_singleton=e;
},{}],"kJJ9":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.to_uniform_level=exports.LEVEL_TO_CONSOLE_METHOD=void 0;var r=require("@offirmo/practical-logger-core");exports.LEVEL_TO_CONSOLE_METHOD={fatal:"error",emerg:"error",alert:"error",crit:"error",error:"error",warning:"warn",warn:"warn",notice:"info",info:"info",verbose:"info",log:"log",debug:"debug",trace:"debug",silly:"debug"};var e=5;function o(o){var t=r.LOG_LEVEL_TO_HUMAN[o];return t=(t+"         ").slice(0,e)}exports.to_uniform_level=o;
},{"@offirmo/practical-logger-core":"DITU"}],"jqLu":[function(require,module,exports) {
"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(r){for(var o,t=1,e=arguments.length;t<e;t++)for(var s in o=arguments[t])Object.prototype.hasOwnProperty.call(o,s)&&(r[s]=o[s]);return r}).apply(this,arguments)},o=this&&this.__spreadArray||function(r,o,t){if(t||2===arguments.length)for(var e,s=0,n=o.length;s<n;s++)!e&&s in o||(e||(e=Array.prototype.slice.call(o,0,s)),e[s]=o[s]);return r.concat(e||Array.prototype.slice.call(o))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.build_args=exports.add_styled_string=exports.LEVEL_TO_COLOR_STYLE=exports.FONT_FAMILY_BETTER_MONOSPACE=exports.FONT_FAMILY_BETTER_PROPORTIONAL=void 0;var t="font-family: "+["-apple-system","BlinkMacSystemFont","noto","roboto","sans-serif"].join(", ");exports.FONT_FAMILY_BETTER_PROPORTIONAL=t;var e="font-family: "+['"Fira Code"',"Menlo","Consolas","monospace"].join(", ");exports.FONT_FAMILY_BETTER_MONOSPACE=e;var s={fatal:"",emerg:"",alert:"",crit:"",error:"",warning:"",warn:"",notice:"color: #659AD2",info:"color: #659AD2",verbose:"color: #659AD2",log:"",debug:"color: #9AA2AA",trace:"color: #9AA2AA",silly:"color: #9AA2AA"};function n(r,t){for(var e=[],s=2;s<arguments.length;s++)e[s-2]=arguments[s];var n=r[0],a=r.slice(1);return o(o([n+"%c"+t],a,!0),[e.join(";")+";"],!1)}function a(o,t){var e=t.err,s=t.details,n=o;return e&&(s=r(r({},s),{err:e})),Object.keys(s).length&&n.push(s),e&&n.push(e),n}exports.LEVEL_TO_COLOR_STYLE=s,exports.add_styled_string=n,exports.build_args=a;
},{}],"ikJN":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.sink=void 0;var _=require("../common"),O=require("./common");function e(_){return"error"===_}var L="font-size: 10px",T=function(T){var t=T.level,E=T.name,r=T.msg,s=(T.err,T.details,_.LEVEL_TO_CONSOLE_METHOD[t]),d=console[s],n=[""];e(s)||(n=(0,O.add_styled_string)(n,"▷",O.LEVEL_TO_COLOR_STYLE[t],"font-size: 8px",O.FONT_FAMILY_BETTER_PROPORTIONAL,"margin-left: .35em","margin-right: .5em")),n=(0,O.add_styled_string)(n,"[",O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),n=(0,O.add_styled_string)(n,(0,_.to_uniform_level)(t),O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_MONOSPACE),n=(0,O.add_styled_string)(n,"] ",O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),n=(0,O.add_styled_string)(n,"","font-size: unset"),E&&(n=(0,O.add_styled_string)(n,"".concat(E," › "),O.LEVEL_TO_COLOR_STYLE[t],O.FONT_FAMILY_BETTER_PROPORTIONAL)),n=(0,O.add_styled_string)(n,r,O.LEVEL_TO_COLOR_STYLE[t],O.FONT_FAMILY_BETTER_PROPORTIONAL),d.apply(void 0,(0,O.build_args)(n,T))};exports.sink=T,exports.default=exports.sink;
},{"../common":"kJJ9","./common":"jqLu"}],"Co9R":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.sink=void 0;var _=require("../common"),O=require("./common");function e(_){return"error"===_||"warn"===_}var L="font-size: 8px",t="font-size: 11px",T=function(T){var r=T.level,E=T.name,s=T.msg,n=(T.err,T.details,_.LEVEL_TO_CONSOLE_METHOD[r]),d=console[n],i=[""];e(n)||(i=(0,O.add_styled_string)(i,"▷",O.LEVEL_TO_COLOR_STYLE[r],"font-size: 8px",O.FONT_FAMILY_BETTER_PROPORTIONAL,"margin-left: .1em","margin-right: .2em")),i=(0,O.add_styled_string)(i,"[",O.LEVEL_TO_COLOR_STYLE[r],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),i=(0,O.add_styled_string)(i,(0,_.to_uniform_level)(r),O.LEVEL_TO_COLOR_STYLE[r],L,O.FONT_FAMILY_BETTER_MONOSPACE),i=(0,O.add_styled_string)(i,"] ",O.LEVEL_TO_COLOR_STYLE[r],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),i=(0,O.add_styled_string)(i,"","font-size: unset"),E&&(i=(0,O.add_styled_string)(i,"".concat(E," › "),O.LEVEL_TO_COLOR_STYLE[r],O.FONT_FAMILY_BETTER_PROPORTIONAL,t)),i=(0,O.add_styled_string)(i,s,O.LEVEL_TO_COLOR_STYLE[r],O.FONT_FAMILY_BETTER_PROPORTIONAL,t),d.apply(void 0,(0,O.build_args)(i,T))};exports.sink=T,exports.default=exports.sink;
},{"../common":"kJJ9","./common":"jqLu"}],"mi2v":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.sink=void 0;var _=require("../common"),O=require("./common");function e(_,O){return O||"error"===_}var L="font-size: 9px",T=function(T){var t=T.level,E=T.name,r=T.msg,s=(T.err,T.details),d=_.LEVEL_TO_CONSOLE_METHOD[t],n=console[d],i=[""];e(d,s)||(i=(0,O.add_styled_string)(i,"▷",O.LEVEL_TO_COLOR_STYLE[t],"font-size: 10px",O.FONT_FAMILY_BETTER_PROPORTIONAL,"margin-left: .15em","margin-right: .4em")),i=(0,O.add_styled_string)(i,"[",O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),i=(0,O.add_styled_string)(i,(0,_.to_uniform_level)(t),O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_MONOSPACE),i=(0,O.add_styled_string)(i,"] ",O.LEVEL_TO_COLOR_STYLE[t],L,O.FONT_FAMILY_BETTER_PROPORTIONAL),i=(0,O.add_styled_string)(i,"","font-size: unset"),E&&(i=(0,O.add_styled_string)(i,"".concat(E," › "),O.LEVEL_TO_COLOR_STYLE[t],O.FONT_FAMILY_BETTER_PROPORTIONAL)),i=(0,O.add_styled_string)(i,r,O.LEVEL_TO_COLOR_STYLE[t],O.FONT_FAMILY_BETTER_PROPORTIONAL),n.apply(void 0,(0,O.build_args)(i,T))};exports.sink=T,exports.default=exports.sink;
},{"../common":"kJJ9","./common":"jqLu"}],"B7Z3":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./common");function o(o){return void 0===o&&(o={}),function(o){var r=o.level,t=o.name,s=o.msg,u=o.err,n=o.details,l=e.LEVEL_TO_CONSOLE_METHOD[r],a=console[l],c=["[",(0,e.to_uniform_level)(r),"] "];t&&c.push("".concat(t," › ")),c.push(s);var i=c;Object.keys(n).length&&i.push(n),u&&i.push(u),a.apply(void 0,i)}}exports.default=o;
},{"./common":"kJJ9"}],"GBiU":[function(require,module,exports) {
"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.create=void 0;var r=e(require("./advanced/firefox")),t=e(require("./advanced/chromium")),i=e(require("./advanced/safari")),u=e(require("./no-css"));function a(){try{if(window.InstallTrigger)return"firefox";if(window.ApplePaySession)return"safari";if(window.chrome)return"chromium"}catch(e){}return"other"}function n(e){if(void 0===e&&(e={}),!1===e.useCss)return(0,u.default)(e);switch(e.explicitBrowser||a()){case"firefox":return r.default;case"safari":return i.default;case"chromium":return t.default;default:return(0,u.default)(e)}}exports.create=n;
},{"./advanced/firefox":"ikJN","./advanced/chromium":"Co9R","./advanced/safari":"mi2v","./no-css":"B7Z3"}],"iBPN":[function(require,module,exports) {
"use strict";var o=this&&this.__spreadArray||function(o,e,r){if(r||2===arguments.length)for(var l,a=0,n=e.length;a<n;a++)!l&&a in e||(l||(l=Array.prototype.slice.call(e,0,a)),l[a]=e[a]);return o.concat(l||Array.prototype.slice.call(e))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.improve_console_groups=void 0;var e=["debug","log","info","warn","error","group","groupCollapsed","groupEnd","table","trace","dir","dirxml","count","assert"],r=!1;function l(l){var a=void 0===l?{}:l,n=a.uncollapse_level,t=void 0===n?"warn":n,p=a.lazy,d=void 0===p||p,s=a.original_console,u=void 0===s?console:s;r&&console.log("install",{uncollapse_level:t,lazy:d});var i=[],c=!1,g={};function f(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];r&&g.log(">>> before groupEnd",{lazy:d,depth:i.length},'"'.concat(o[0],'"'));var l=i.pop();l&&l.is_effective&&(c=!0,g.groupEnd.apply(g,o),c=!1),r&&g.log("<<< after groupEnd",{lazy:d,depth:i.length})}function h(o,e){for(var l=[],a=2;a<arguments.length;a++)l[a-2]=arguments[a];if(c)return o.apply(void 0,l);if(r&&o(">>> before output",{depth:i.length},'"'.concat(l[0],'"')),i.forEach(function(l){var a=l.is_effective,n=l.is_deployed,t=l.params;a||(r&&o("--- lazy call"),e||n?(c=!0,g.group.apply(g,t),c=!1,l.is_deployed=!0):(c=!0,g.groupCollapsed.apply(g,t),c=!1,l.is_deployed=!1),l.is_effective=!0)}),r&&o("--- output"),e)for(var n=i.findIndex(function(o){return!o.is_deployed});n>=0&&i.length&&i.length>n;)f(),g.debug("(forced break out of collapsed group ↑ due to critical log ↓)");r&&o("--- output"),o.apply(void 0,l),r&&o("<<<after output",{depth:i.length})}e.forEach(function(o){g[o]=u[o]});var v=new Set;console.group=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];r&&g.log(">>> before group",{lazy:d,depth:i.length},'"'.concat(o[0],'"')),i.push({params:o,is_deployed:!0,is_effective:!d}),d||(c=!0,g.group.apply(g,o),c=!1),r&&g.log("<<< after group",{depth:i.length})},v.add("group"),console.groupCollapsed=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];r&&g.log(">>> before groupCollapsed",{lazy:d,depth:i.length},'"'.concat(o[0],'"')),i.push({params:o,is_deployed:!1,is_effective:!d}),d||(c=!0,g.groupCollapsed.apply(g,o),c=!1),r&&g.log("after groupCollapsed",{depth:i.length})},v.add("groupCollapsed"),console.groupEnd=f,v.add("groupEnd"),console.warn=h.bind(null,g.warn,"warn"===t),v.add("warn"),console.error=h.bind(null,g.error,!0),v.add("error"),console.assert=function(e){for(var r=[],l=1;l<arguments.length;l++)r[l-1]=arguments[l];e||h.apply(void 0,o([g.assert,!0,e],r,!1))},v.add("assert"),e.forEach(function(o){v.has(o)||(console[o]=h.bind(null,g[o],!1),v.add(o))})}exports.improve_console_groups=l,exports.default=l;
},{}],"qVXD":[function(require,module,exports) {
"use strict";var e=this&&this.__assign||function(){return(e=Object.assign||function(e){for(var r,t=1,o=arguments.length;t<o;t++)for(var i in r=arguments[t])Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i]);return e}).apply(this,arguments)},r=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var i=Object.getOwnPropertyDescriptor(r,t);i&&("get"in i?r.__esModule:!i.writable&&!i.configurable)||(i={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,i)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),t=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEFAULT_LOGGER_KEY=exports.DEFAULT_LOG_LEVEL=exports.createLogger=void 0;var i=o(require("@offirmo/tiny-singleton")),n=require("@offirmo/practical-logger-core"),u=require("./sinks"),s=o(require("./better-console-groups/practical-logger")),a=console,c=(0,i.default)(function(e){e&&(0,s.default)()});function p(r){var t,o;void 0===r&&(r={}),c(!1!==(null===(t=r.sinkOptions)||void 0===t?void 0:t.betterGroups));var i=(null===(o=r.sinkOptions)||void 0===o?void 0:o.sink)||(0,u.create)(r.sinkOptions),s=a.group,p=a.groupCollapsed,l=a.groupEnd;return e(e({},(0,n.createLogger)(r,i)),{group:s,groupCollapsed:p,groupEnd:l})}exports.createLogger=p,t(require("@offirmo/practical-logger-types"),exports);var l=require("@offirmo/practical-logger-core");Object.defineProperty(exports,"DEFAULT_LOG_LEVEL",{enumerable:!0,get:function(){return l.DEFAULT_LOG_LEVEL}}),Object.defineProperty(exports,"DEFAULT_LOGGER_KEY",{enumerable:!0,get:function(){return l.DEFAULT_LOGGER_KEY}});
},{"@offirmo/tiny-singleton":"KdUZ","@offirmo/practical-logger-core":"DITU","./sinks":"GBiU","./better-console-groups/practical-logger":"iBPN","@offirmo/practical-logger-types":"Qoo0"}],"hZFD":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LS_ROOT=void 0,exports.LS_ROOT="🛠UDA";
},{}],"wex4":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getLSKeyForOverride=exports.getOverrideKeyForLogger=exports.LS_ROOT=void 0;var e=require("../consts"),r=require("../consts");function t(e){return"logger.".concat(e||"default",".logLevel")}function o(r){return"".concat(e.LS_ROOT,".override.").concat(r)}Object.defineProperty(exports,"LS_ROOT",{enumerable:!0,get:function(){return r.LS_ROOT}}),exports.getOverrideKeyForLogger=t,exports.getLSKeyForOverride=o;
},{"../consts":"hZFD"}],"QmKr":[function(require,module,exports) {
"use strict";var e=this&&this.__assign||function(){return(e=Object.assign||function(e){for(var r,o=1,t=arguments.length;o<t;o++)for(var n in r=arguments[o])Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);return e}).apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.OWN_LOGGER_NAME=void 0;var r=require("@offirmo/practical-logger-core"),o=require("@offirmo/practical-logger-browser"),t=require("./keys");exports.OWN_LOGGER_NAME=t.LS_ROOT;var n=100;function a(){var i={},c={},l={},v={},g=i[exports.OWN_LOGGER_NAME]=(0,o.createLogger)({name:exports.OWN_LOGGER_NAME,suggestedLevel:"fatal"});function d(e){try{var r=(0,t.getLSKeyForOverride)(e);return localStorage.getItem(r)}catch(o){return g.warn('🔴 error reading LS for override "'.concat(e,'"!'),{err:o}),null}}var s=d((0,t.getOverrideKeyForLogger)("_UDA_internal"));try{s&&g.setLevel(JSON.parse(s))}catch(f){g.fatal('🔴 error setting internal logger forced level: "'.concat(s,'"!'))}function u(e,r){try{var o=function(e){if(!v[e]){v[e]={isOn:!1,value:void 0};var r=d(e);if(r)try{v[e].isOn=!0;var o="undefined"===r?void 0:JSON.parse(r);v[e].value=o,g.log(' 🔵 overriden "'.concat(e,'"'),{value:o})}catch(f){g.warn('🔴 failed to override "'.concat(e,'"!'),{badValue:r,err:f})}}return v[e]}(e);if(o.isOn)return o.value}catch(f){g.error("overrideHook(): error retrieving override!",{key:e,err:f})}return r}return g.debug("Instantiated. (revision: ".concat(n,")")),{getLogger:function(n){void 0===n&&(n={});var a=n.name||r.DEFAULT_LOGGER_KEY;if(!i[a]){try{var c=(0,t.getOverrideKeyForLogger)(a);!n.forcedLevel&&d(c)&&(n=e(e({},n),{forcedLevel:u(c,n.suggestedLevel||r.DEFAULT_LOG_LEVEL)}))}catch(f){g.error("getLogger(): error overriding the level!",{name:a,err:f})}i[a]=(0,o.createLogger)(n)}return i[a]},exposeInternal:function(e,r){g.warn("exposeInternal(): alpha, not documented!");try{var o=e.split("."),t=o.length-1,n=l;o.forEach(function(e,o){n[e]=n[e]||(o===t?r:{}),n=n[e]})}catch(f){g.error("exposeInternal(): error exposing!",{path:e,err:f})}},overrideHook:u,addDebugCommand:function(e,r){g.warn("addDebugCommand(): alpha, not documented!"),c[e]=r},_:{exposed:l,overrides:v,minor:n,source:"browser-lib",create:a}}}exports.default=a;
},{"@offirmo/practical-logger-core":"DITU","@offirmo/practical-logger-browser":"qVXD","./keys":"wex4"}],"FUq7":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LoggerCreationParams=exports.Logger=void 0;var e=require("@offirmo/practical-logger-types");Object.defineProperty(exports,"Logger",{enumerable:!0,get:function(){return e.Logger}}),Object.defineProperty(exports,"LoggerCreationParams",{enumerable:!0,get:function(){return e.LoggerCreationParams}});
},{"@offirmo/practical-logger-types":"Qoo0"}],"ftHY":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LoggerCreationParams=exports.Logger=exports.DebugApiV1=void 0;var e=require("./v1");Object.defineProperty(exports,"DebugApiV1",{enumerable:!0,get:function(){return e.DebugApi}});var r=require("@offirmo/practical-logger-types");Object.defineProperty(exports,"Logger",{enumerable:!0,get:function(){return r.Logger}}),Object.defineProperty(exports,"LoggerCreationParams",{enumerable:!0,get:function(){return r.LoggerCreationParams}});
},{"./v1":"FUq7","@offirmo/practical-logger-types":"Qoo0"}],"M3Pi":[function(require,module,exports) {
"use strict";var e=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&("get"in a?t.__esModule:!a.writable&&!a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),t=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var o={};if(null!=r)for(var a in r)"default"!==a&&Object.prototype.hasOwnProperty.call(r,a)&&e(o,r,a);return t(o,r),o},o=this&&this.__exportStar||function(t,r){for(var o in t)"default"===o||Object.prototype.hasOwnProperty.call(r,o)||e(r,t,o)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.createV1=exports.globalThis=exports.addDebugCommand=exports.overrideHook=exports.exposeInternal=exports.getLogger=void 0;var a=require("@offirmo/globalthis-ponyfill"),i=r(require("./v1"));exports.createV1=i.default;var n=(0,a.getGlobalThis)();exports.globalThis=n,n._debug=n._debug||{};var s=n._debug;s.v1=function(e){var t=(0,i.default)(),r=t.getLogger({name:i.OWN_LOGGER_NAME});if(r.debug("as a candidate, attempting to attach…"),!e)return r.debug("nominal install ✅"),t;if(!e._)return r.warn("install warning: a placeholder is already present, you may have missed some calls! the true implementation should be imported earlier! Check the order of your scripts/imports!"),r.log("as a candidate, replacing existing ⚠"),t;(r=e.getLogger({name:i.OWN_LOGGER_NAME})).warn("install warning: several true implementation coexists, only the top module should import it. Check your submodules!");try{var o=Math.min(e._.minor,t._.minor);o!==t._.minor&&r.warn('install warning: several true implementation coexists, including an outdated one: "v'.concat(o,'"!'))}catch(a){r.warn(a)}return r.log("as a candidate, discarding myself: existing is good enough ✅"),e}(s.v1);var l=s.v1,u=l.getLogger,d=l.exposeInternal,g=l.overrideHook,c=l.addDebugCommand;exports.getLogger=u,exports.exposeInternal=d,exports.overrideHook=g,exports.addDebugCommand=c,o(require("@offirmo/universal-debug-api-interface"),exports);
},{"@offirmo/globalthis-ponyfill":"ehj8","./v1":"QmKr","@offirmo/universal-debug-api-interface":"ftHY"}],"zISz":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("@offirmo/universal-debug-api-browser"),window._debug.v1._.source="browser-ext";
},{"@offirmo/universal-debug-api-browser":"M3Pi"}]},{},["zISz"], null)'
export default lib
