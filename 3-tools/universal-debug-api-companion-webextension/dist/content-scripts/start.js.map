{"version":3,"sources":["../../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","common/consts/entry.ts","common/consts/content--start.ts","common/consts/index.ts","common/messages/report-usage.ts","common/messages/index.ts","content-scripts/lib-to-inject-1.ts","content-scripts/lib-to-inject-2.ts","content-scripts/start.ts"],"names":["isProduction","prefix","invariant","condition","message","Error"],"mappings":"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","file":"start.js","sourceRoot":"../src","sourcesContent":["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n}\n\nexport default invariant;\n","export const MSG_ENTRY = '🧩UWDT.v0' // TODO v1 one day!\n","export * from './entry'\nexport const LS_ROOT = '🧩UWDT' // !== UDA\nexport const LS_KEY_ENABLED = `${LS_ROOT}.enabled`\n","export const UNKNOWN_ORIGIN = '???'\n\nexport * from './entry'\nexport * from './content--start'\n","import { MSG_ENTRY } from '../consts/entry'\nimport { StringifiedJSON } from '../utils/stringified-json'\n\n////////////////////////////////////\n\nexport interface OverrideReport {\n\ttype: 'override'\n\tkey: string\n\tdefault_value_sjson: StringifiedJSON\n\texisting_override_sjson: null | StringifiedJSON,\n}\nexport interface LoggerReport { // TODO needed?\n\ttype: 'logger'\n}\nexport interface CommandReport {\n\ttype: 'command'\n}\nexport type Report = OverrideReport | LoggerReport | CommandReport\n\n////////////////////////////////////\n\nexport const MSG_TYPE__REPORT_DEBUG_API_USAGE = 'report-usage'\nexport function create_msg_report_debug_api_usage(reports: Report[]) {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__REPORT_DEBUG_API_USAGE,\n\t\t\treports,\n\t\t}\n\t}\n}\n","import { MSG_ENTRY } from '../consts'\nimport * as OriginState from '../state/origin'\nimport * as UIState from '../state/ui'\n\nexport const MSG_TYPE__TOGGLE_LIB_INJECTION = 'toggle-lib-injection'\nexport function create_msg_toggle_lib_injection() {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__TOGGLE_LIB_INJECTION,\n\t\t}\n\t}\n}\n\nexport const MSG_TYPE__REPORT_IS_LIB_INJECTED = 'report-is-lib-injected'\nexport function create_msg_report_is_lib_injected(url: string, is_injected: boolean) {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__REPORT_IS_LIB_INJECTED,\n\t\t\turl, // needed because this event may follow updated=loading which resets the url\n\t\t\tis_injected,\n\t\t}\n\t}\n}\n\nexport const MSG_TYPE__OVERRIDE_SPEC_CHANGED = 'change-override-spec'\nexport function create_msg_change_override_spec(key: string, partial: Readonly<Partial<OriginState.OverrideState>>) {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__OVERRIDE_SPEC_CHANGED,\n\t\t\tkey,\n\t\t\tpartial,\n\t\t}\n\t}\n}\n\nexport const MSG_TYPE__UPDATE_UI_STATE = 'update-ui-state'\nexport function create_msg_update_ui_state(state: Readonly<UIState.State>) {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__UPDATE_UI_STATE,\n\t\t\tstate,\n\t\t}\n\t}\n}\n\nexport const MSG_TYPE__UPDATE_LS_STATE = 'update-ls-state'\nexport function create_msg_update_ls_state(kv: Readonly<{ [k: string]: string | null }>) {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__UPDATE_LS_STATE,\n\t\t\tkv,\n\t\t}\n\t}\n}\n\nexport const MSG_TYPE__REQUEST_CURRENT_PAGE_RELOAD = 'request-current-page-reload'\nexport function create_msg_request_reload() {\n\treturn {\n\t\t[MSG_ENTRY]: {\n\t\t\ttype: MSG_TYPE__REQUEST_CURRENT_PAGE_RELOAD,\n\t\t}\n\t}\n}\n\nexport * from './report-usage'\n","\n// THIS FILE IS AUTO GENERATED!\n// This is a base64 version of the Universal Web Debug API:\n// https://github.com/Offirmo/offirmo-monorepo/tree/master/2-advanced/universal-debug-api-browser\n// bundled in a single file through this local file:\n// ../src/injected-libs/universal-debug-api-from-webext.ts\nconst lib = ''\nexport default lib\n","\n// THIS FILE IS AUTO GENERATED!\n// This is a base64 version of a content script to communicate with UWDT webextension\n// bundled in a single file through this local file:\n// ../src/injected-libs/universal-debug-api-control.ts\nconst lib = 'cGFyY2VsUmVxdWlyZT1mdW5jdGlvbihlLHIsdCxuKXt2YXIgaSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBwYXJjZWxSZXF1aXJlJiZwYXJjZWxSZXF1aXJlLHU9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7ZnVuY3Rpb24gZih0LG4pe2lmKCFyW3RdKXtpZighZVt0XSl7dmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHBhcmNlbFJlcXVpcmUmJnBhcmNlbFJlcXVpcmU7aWYoIW4mJmkpcmV0dXJuIGkodCwhMCk7aWYobylyZXR1cm4gbyh0LCEwKTtpZih1JiYic3RyaW5nIj09dHlwZW9mIHQpcmV0dXJuIHUodCk7dmFyIGM9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrdCsiJyIpO3Rocm93IGMuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsY31wLnJlc29sdmU9ZnVuY3Rpb24ocil7cmV0dXJuIGVbdF1bMV1bcl18fHJ9LHAuY2FjaGU9e307dmFyIGw9clt0XT1uZXcgZi5Nb2R1bGUodCk7ZVt0XVswXS5jYWxsKGwuZXhwb3J0cyxwLGwsbC5leHBvcnRzLHRoaXMpfXJldHVybiByW3RdLmV4cG9ydHM7ZnVuY3Rpb24gcChlKXtyZXR1cm4gZihwLnJlc29sdmUoZSkpfX1mLmlzUGFyY2VsUmVxdWlyZT0hMCxmLk1vZHVsZT1mdW5jdGlvbihlKXt0aGlzLmlkPWUsdGhpcy5idW5kbGU9Zix0aGlzLmV4cG9ydHM9e319LGYubW9kdWxlcz1lLGYuY2FjaGU9cixmLnBhcmVudD1vLGYucmVnaXN0ZXI9ZnVuY3Rpb24ocix0KXtlW3JdPVtmdW5jdGlvbihlLHIpe3IuZXhwb3J0cz10fSx7fV19O2Zvcih2YXIgYz0wO2M8dC5sZW5ndGg7YysrKXRyeXtmKHRbY10pfWNhdGNoKGUpe2l8fChpPWUpfWlmKHQubGVuZ3RoKXt2YXIgbD1mKHRbdC5sZW5ndGgtMV0pOyJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9bDoiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBsfSk6biYmKHRoaXNbbl09bCl9aWYocGFyY2VsUmVxdWlyZT1mLGkpdGhyb3cgaTtyZXR1cm4gZn0oeyJubkxBIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGV4cG9ydHMuREVGQVVMVF9MT0dfTEVWRUw9ImVycm9yIixleHBvcnRzLkRFRkFVTFRfTE9HR0VSX0tFWT0iIjsKfSx7fV0sIkhyQkYiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CiJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZXhwb3J0cy5MU19ST09UPSLwn5ugVURBIjsKfSx7fV0sImxoQzAiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CiJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGU9cmVxdWlyZSgiLi4vY29uc3RzIikscj1yZXF1aXJlKCIuLi9jb25zdHMiKTtmdW5jdGlvbiB0KGUpe3JldHVybiJsb2dnZXIuIisoZXx8ImRlZmF1bHQiKSsiLmxvZ0xldmVsIn1mdW5jdGlvbiBvKHIpe3JldHVybiBlLkxTX1JPT1QrIi5vdmVycmlkZS4iK3J9ZXhwb3J0cy5MU19ST09UPXIuTFNfUk9PVCxleHBvcnRzLmdldE92ZXJyaWRlS2V5Rm9yTG9nZ2VyPXQsZXhwb3J0cy5nZXRMU0tleUZvck92ZXJyaWRlPW87Cn0seyIuLi9jb25zdHMiOiJIckJGIn1dLCJNeDZDIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGV4cG9ydHMuTVNHX0VOVFJZPSLwn6epVVdEVC52MCI7Cn0se31dLCJ2TkJ5IjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBlPXJlcXVpcmUoIi4uL2NvbnN0cy9lbnRyeSIpO2Z1bmN0aW9uIHIocil7dmFyIF87cmV0dXJuKF89e30pW2UuTVNHX0VOVFJZXT17dHlwZTpleHBvcnRzLk1TR19UWVBFX19SRVBPUlRfREVCVUdfQVBJX1VTQUdFLHJlcG9ydHM6cn0sX31leHBvcnRzLk1TR19UWVBFX19SRVBPUlRfREVCVUdfQVBJX1VTQUdFPSJyZXBvcnQtdXNhZ2UiLGV4cG9ydHMuY3JlYXRlX21zZ19yZXBvcnRfZGVidWdfYXBpX3VzYWdlPXI7Cn0seyIuLi9jb25zdHMvZW50cnkiOiJNeDZDIn1dLCJsUHFSIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihyKXtpZihyIT09ZXhwb3J0cy5KU09OX1VOREVGSU5FRClyZXR1cm4gSlNPTi5wYXJzZShyKX1mdW5jdGlvbiBlKHIpe3JldHVybiB2b2lkIDA9PT1yP2V4cG9ydHMuSlNPTl9VTkRFRklORUQ6SlNPTi5zdHJpbmdpZnkocil9ZnVuY3Rpb24gcyhyKXtpZihyPT09ZXhwb3J0cy5KU09OX1VOREVGSU5FRClyZXR1cm4hMDtpZigic3RyaW5nIiE9dHlwZW9mIHIpcmV0dXJuIGNvbnNvbGUuZXJyb3IoImlzX3ZhbGlkX3N0cmluZ2lmaWVkX2pzb24gZmFpbHVyZSAxISIse3Nqc29uOnJ9KSwhMTt0cnl7cmV0dXJuIEpTT04ucGFyc2UociksITB9Y2F0Y2goZSl7cmV0dXJuIGNvbnNvbGUuZXJyb3IoImlzX3ZhbGlkX3N0cmluZ2lmaWVkX2pzb24gZmFpbHVyZSAyISIse3Nqc29uOnJ9KSwhMX19ZnVuY3Rpb24gbihyKXtyZXR1cm4gcj09PWV4cG9ydHMuSlNPTl9VTkRFRklORUQ/InVuZGVmaW5lZCI6cn1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZXhwb3J0cy5KU09OX1VOREVGSU5FRD0idW5kZWZpbmVkIixleHBvcnRzLnNqc29uX3BhcnNlPXIsZXhwb3J0cy5zanNvbl9zdHJpbmdpZnk9ZSxleHBvcnRzLmlzX3ZhbGlkX3N0cmluZ2lmaWVkX2pzb249cyxleHBvcnRzLmNvbnRyb2xfc2pzb249bjsKfSx7fV0sIk9aQUgiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CiJ1c2Ugc3RyaWN0Ijt2YXIgZT10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgbyxyPTEsdD1hcmd1bWVudHMubGVuZ3RoO3I8dDtyKyspZm9yKHZhciBuIGluIG89YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLG4pJiYoZVtuXT1vW25dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPXJlcXVpcmUoIkBvZmZpcm1vL3ByYWN0aWNhbC1sb2dnZXItY29yZS9zcmMvY29uc3RzLWJhc2UiKSxyPXJlcXVpcmUoIkBvZmZpcm1vLXByaXZhdGUvdW5pdmVyc2FsLWRlYnVnLWFwaS1icm93c2VyL3NyYy92MS9rZXlzIiksdD1yZXF1aXJlKCIuLi9jb21tb24vbWVzc2FnZXMvcmVwb3J0LXVzYWdlIiksbj1yZXF1aXJlKCIuLi9jb21tb24vdXRpbHMvc3RyaW5naWZpZWQtanNvbiIpLHM9ITE7dHJ5e3M9c3x8ISF3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIvCfp6lVV0RUaS5jb250ZXh0LmRlYnVnIil9Y2F0Y2gocCl7fXZhciBpPXdpbmRvdy5fZGVidWcudjEsYT17fSxnPVtdLHU9ITE7ZnVuY3Rpb24gbCgpe3MmJmNvbnNvbGUubG9nKCLwn6epVVdEVGk6IHNjaGVkdWxlX3N5bmMiLHtsYXN0X3F1ZXVlZDpnLnNsaWNlKC0xKVswXSxxdWV1ZV9zaXplOmcubGVuZ3RoLGluX2ZsaWdodDp1fSksdXx8KHU9ITAsc2V0VGltZW91dChmdW5jdGlvbigpe3MmJmNvbnNvbGUubG9nKCLwn6epVVdEVGk6IHBvc3RpbmcgY3JlYXRlX21zZ19yZXBvcnRfZGVidWdfYXBpX3VzYWdlLi4uIik7dHJ5e3dpbmRvdy5wb3N0TWVzc2FnZSh0LmNyZWF0ZV9tc2dfcmVwb3J0X2RlYnVnX2FwaV91c2FnZShnKSwiKiIpfWNhdGNoKGUpe3MmJmNvbnNvbGUuZXJyb3IoIvCfp6lVV0RUaTogZXJyb3Igd2hlbiBzeW5jaW5nISIsZSl9Zy5sZW5ndGg9MCx1PSExfSkpfWZ1bmN0aW9uIGMoZSl7dHJ5e3ZhciBvPXIuZ2V0TFNLZXlGb3JPdmVycmlkZShlKTtyZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0obyl9Y2F0Y2godCl7cmV0dXJuIG51bGx9fWZ1bmN0aW9uIGQoZSxvKXtpZighYS5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIHI9bi5zanNvbl9zdHJpbmdpZnkobyk7cyYmY29uc29sZS5sb2coIvCfp6lVV0RUaTogb3ZlcnJpZGVIb29rKCkiLHtrZXk6ZSxkZWZhdWx0X3ZhbHVlOm8sZGVmYXVsdF92YWx1ZV9zanNvbjpyfSk7dmFyIHQ9YyhlKTtnLnB1c2goe3R5cGU6Im92ZXJyaWRlIixrZXk6ZSxkZWZhdWx0X3ZhbHVlX3Nqc29uOnIsZXhpc3Rpbmdfb3ZlcnJpZGVfc2pzb246dH0pLGwoKSxhW2VdPXR9cmV0dXJuIGkub3ZlcnJpZGVIb29rKGUsbyl9ZnVuY3Rpb24gXyh0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIG49dC5uYW1lfHxvLkRFRkFVTFRfTE9HR0VSX0tFWSxhPXIuZ2V0T3ZlcnJpZGVLZXlGb3JMb2dnZXIobiksZz10LnN1Z2dlc3RlZExldmVsfHxvLkRFRkFVTFRfTE9HX0xFVkVMO3MmJmNvbnNvbGUubG9nKCLwn6epVVdEVGk6IGdldExvZ2dlcigpIix7cGFyYW1zOnQsbmFtZTpuLG92RGVmYXVsdExldmVsOmcsREVGQVVMVF9MT0dfTEVWRUw6by5ERUZBVUxUX0xPR19MRVZFTH0pO3ZhciB1PWQoYSxnKTtyZXR1cm4hdC5mb3JjZWRMZXZlbCYmYyhhKSYmKHQ9ZShlKHt9LHQpLHtmb3JjZWRMZXZlbDp1fSkpLGkuZ2V0TG9nZ2VyKHQpfWZ1bmN0aW9uIHYoZSxvKXtyZXR1cm4gcyYmY29uc29sZS5sb2coIvCfp6lVV0RUaTogZXhwb3NlSW50ZXJuYWwoKSIse3BhdGg6ZX0pLGkuZXhwb3NlSW50ZXJuYWwoZSxvKX1mdW5jdGlvbiBmKGUsbyl7cmV0dXJuIHMmJmNvbnNvbGUubG9nKCLwn6epVVdEVGk6IGFkZERlYnVnQ29tbWFuZCgpIix7Y29tbWFuZE5hbWU6ZX0pLGkuYWRkRGVidWdDb21tYW5kKGUsbyl9d2luZG93Ll9kZWJ1Zy52MT1lKGUoe30saSkse292ZXJyaWRlSG9vazpkLGdldExvZ2dlcjpfLGV4cG9zZUludGVybmFsOnYsYWRkRGVidWdDb21tYW5kOmZ9KSxzJiZjb25zb2xlLmxvZygi8J+nqVVXRFRpOiBhbGwgc2V0IHVwIOKchSIpOwp9LHsiQG9mZmlybW8vcHJhY3RpY2FsLWxvZ2dlci1jb3JlL3NyYy9jb25zdHMtYmFzZSI6Im5uTEEiLCJAb2ZmaXJtby1wcml2YXRlL3VuaXZlcnNhbC1kZWJ1Zy1hcGktYnJvd3Nlci9zcmMvdjEva2V5cyI6ImxoQzAiLCIuLi9jb21tb24vbWVzc2FnZXMvcmVwb3J0LXVzYWdlIjoidk5CeSIsIi4uL2NvbW1vbi91dGlscy9zdHJpbmdpZmllZC1qc29uIjoibFBxUiJ9XX0se30sWyJPWkFIIl0sIG51bGwp'\nexport default lib\n","//import { browser } from 'webextension-polyfill-ts' // TODO smaller than loading the full polyfill?\nconst browser = (globalThis as any).browser || (globalThis as any).chrome\n\n\nimport assert from 'tiny-invariant'\n\nimport { MSG_ENTRY, LS_KEY_ENABLED } from '../common/consts/content--start'\nimport {\n\tcreate_msg_report_is_lib_injected,\n\tMSG_TYPE__UPDATE_LS_STATE,\n} from '../common/messages' // TODO smaller import\nimport { MSG_TYPE__REPORT_DEBUG_API_USAGE } from '../common/messages/report-usage'\n\nimport lib1 from './lib-to-inject-1'\nimport lib2 from './lib-to-inject-2'\n\nconst LIB = '🧩 UWDT/CS--start'\n\nlet DEBUG = false\ntry { // defensive!\n\tDEBUG = DEBUG || !!window.localStorage.getItem(`🧩UWDTi.context.debug`);\n} catch { /* swallow */ }\n\nif (DEBUG) {\n\tconsole.log(`[${LIB},${Date.now()}] Hello!`, {\n\t\tbrowser,\n\t\tdocument,\n\t\t'_debug.enabled': localStorage.getItem(LS_KEY_ENABLED) === 'true'\n\t})\n}\n\n////////////////////////////////////\n\nfunction onMessage(event: MessageEvent) {\n\tif (!event.data[MSG_ENTRY]) return // not for/from us\n\n\tif (DEBUG) console.group(`[${LIB},${Date.now()}] received postMessage:`, event.data)\n\n\tconst payload = event.data[MSG_ENTRY]\n\tconst { type } = payload\n\tif (DEBUG) console.log('message =', { type, payload })\n\n\tswitch(type) {\n\t\tcase MSG_TYPE__REPORT_DEBUG_API_USAGE:\n\t\t\t// forward to background\n\t\t\tbrowser.runtime.sendMessage(event.data)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tif (DEBUG) console.error(`[${LIB},${Date.now()}] Unhandled postMessage type \"${type}\"!`)\n\t\t\tbreak\n\t}\n\tif (DEBUG) console.groupEnd()\n}\nconst listenerOptions = {\n\tcapture: false, // http://devdocs.io/dom/window/postmessage\n}\nwindow.addEventListener('message', onMessage, listenerOptions)\n\n\n////////////////////////////////////\n\nlet should_inject = false\ntry { // defensive!\n\tshould_inject = should_inject || localStorage.getItem(LS_KEY_ENABLED) === 'true'\n} catch { /* swallow */ }\n\nif (should_inject) {\n\t// Create a script tag and inject it into the document.\n\n\t// TODO download up-to-date libs from somewhere?\n\t// TODO allow 3rd-party addons?\n\n\t// 1. de-stringifier\n\t// https://stackoverflow.com/a/30106551/587407\n\tconst scriptElement0 = document.createElement('script')\n\tscriptElement0.innerHTML = `\nfunction _UWDT_b64DecodeUnicode(str) {\n\t// Going backwards: from bytestream, to percent-encoding, to original string.\n\treturn decodeURIComponent(atob(str).split('').map(function(c) {\n\t  return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n\t}).join(''));\n}`\n\tdocument.documentElement.prepend(scriptElement0)\n\n\tconst scriptElement1 = document.createElement('script')\n\tscriptElement1.innerHTML = `eval(_UWDT_b64DecodeUnicode(\"${lib1}\"))`\n\tdocument.documentElement.prepend(scriptElement1)\n\n\tconst scriptElement2 = document.createElement('script')\n\tscriptElement2.innerHTML = `eval(_UWDT_b64DecodeUnicode(\"${lib2}\"))`\n\tdocument.documentElement.prepend(scriptElement2)\n\n\tif (DEBUG) console.info(`[${LIB},${Date.now()}] UDA was injected from the webextension ✅`)\n}\nelse {\n\tif (DEBUG) console.info(`[${LIB},${Date.now()}] UDA frow webext is disabled ❎`)\n}\n\nbrowser.runtime.sendMessage(\n\tcreate_msg_report_is_lib_injected(\n\t\tdocument.location.href,\n\t\tshould_inject\n\t)\n)\n// TODO in the response we could have:\n// extension debug mode?\n// extra libs to inject?\n\n////////////////////////////////////\n\nbrowser.runtime.onMessage.addListener((request: any, sender: any): Promise<any> | void => {\n\tif (DEBUG) console.group(`[${LIB},${Date.now()}] 📥 received a simple message`)\n\tlet response: any\n\n\ttry {\n\t\tif (DEBUG) console.log({ sender })\n\n\t\tassert(request[MSG_ENTRY], 'MSG_ENTRY')\n\t\tconst payload = request[MSG_ENTRY]\n\t\tconst { type } = payload\n\n\t\tif (DEBUG) console.log({type, payload})\n\n\t\t// TODO only overwrite if not changed in the meantime?\n\t\t// TODO clean all overrides if disabled?\n\t\t// TODO actively refresh infos on UI open?\n\n\t\tswitch (type) {\n\t\t\tcase MSG_TYPE__UPDATE_LS_STATE: {\n\t\t\t\tObject.entries(payload.kv as { [k: string]: string | null }).forEach(([k, v]) => {\n\t\t\t\t\tif (DEBUG) console.log('updating LS entry:', {k, v})\n\t\t\t\t\tif (v === null)\n\t\t\t\t\t\tlocalStorage.removeItem(k)\n\t\t\t\t\telse\n\t\t\t\t\t\tlocalStorage.setItem(k, v)\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tif (DEBUG) console.error(`Unhandled msg type \"${type}\"!`)\n\t\t\t\t// TODO error report msg?\n\t\t\t\tbreak\n\t\t}\n\t}\n\tcatch (err) {\n\t\tif (DEBUG) console.error(err)\n\t\tresponse = Promise.reject(err)\n\t}\n\n\tif (DEBUG) console.groupEnd()\n\n\tif (response)\n\t\treturn Promise.resolve(response)\n})\n"]}