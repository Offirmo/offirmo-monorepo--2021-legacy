{"version":3,"sources":["content-scripts/lib-to-inject-1.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA;AACA;AACA;AACA;AACA;;AACA,IAAM,GAAG,GAAG,k/0BAAZ;AACA,OAAA,CAAA,OAAA,GAAe,GAAf","file":"lib-to-inject-1.js","sourceRoot":"../src","sourcesContent":["\n// THIS FILE IS AUTO GENERATED!\n// This is a base64 version of the Universal Web Debug API:\n// https://github.com/Offirmo/offirmo-monorepo/tree/master/2-advanced/universal-debug-api-browser\n// bundled in a single file through this local file:\n// ../src/injected-libs/universal-debug-api-from-webext.ts\nconst lib = ''\nexport default lib\n"]}