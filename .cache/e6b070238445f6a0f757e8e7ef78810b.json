{"dependencies":[{"name":"/Users/yjutard/work/src/off/offirmo-monorepo/1-foundation/soft-execution-context/package.json","includedInParent":true,"mtime":1527752875823},{"name":"/Users/yjutard/work/src/off/offirmo-monorepo/1-foundation/soft-execution-context/.babelrc","includedInParent":true,"mtime":1527315405077},{"name":"/Users/yjutard/work/src/off/offirmo-monorepo/1-foundation/soft-execution-context/node_modules/@offirmo/normalize-error/package.json","includedInParent":true,"mtime":1515412660590},{"name":"@offirmo/common-error-fields","loc":{"line":3,"column":38}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_error_fields_1 = require(\"@offirmo/common-error-fields\");\n// Anything can be thrown: undefined, string, number...)\n// But that's obviously not a good practice.\n// Normalize any thrown object into a true, normal error.\nfunction normalizeError(err_like = {}) {\n    // Fact: in browser, sometime an error-like, un-writable object is thrown\n    // create a true, safe, writable error object\n    const true_err = new Error(err_like.message || `(non-error caught: \"${err_like}\")`);\n    // copy fields if they exist\n    common_error_fields_1.COMMON_ERROR_FIELDS.forEach(prop => {\n        //if (prop in err_like)\n        if (err_like[prop])\n            true_err[prop] = err_like[prop];\n    });\n    return true_err;\n}\nexports.normalizeError = normalizeError;\n//# sourceMappingURL=index.js.map","map":{"mappings":[{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../../node_modules/@offirmo/normalize-error/dist/src.es7.cjs/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_error_fields_1 = require(\"@offirmo/common-error-fields\");\n// Anything can be thrown: undefined, string, number...)\n// But that's obviously not a good practice.\n// Normalize any thrown object into a true, normal error.\nfunction normalizeError(err_like = {}) {\n    // Fact: in browser, sometime an error-like, un-writable object is thrown\n    // create a true, safe, writable error object\n    const true_err = new Error(err_like.message || `(non-error caught: \"${err_like}\")`);\n    // copy fields if they exist\n    common_error_fields_1.COMMON_ERROR_FIELDS.forEach(prop => {\n        //if (prop in err_like)\n        if (err_like[prop])\n            true_err[prop] = err_like[prop];\n    });\n    return true_err;\n}\nexports.normalizeError = normalizeError;\n//# sourceMappingURL=index.js.map"},"lineCount":20}},"hash":"24fb23522184d0b5339b055a2b79b308","cacheData":{"env":{}}}