{"version":3,"sources":["../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/tiny-singleton/src/index.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/consts-base.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/consts.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/normalize-args.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/core.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-core/src/index.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/common.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/common.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/firefox.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/chromium.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/advanced/safari.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/no-css.ts","../node_modules/@offirmo/practical-logger-browser/src/sinks/index.ts","../node_modules/@offirmo/practical-logger-browser/src/better-console-groups/practical-logger.ts","../node_modules/@offirmo/practical-logger-browser/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-browser/src/index.ts","../node_modules/@offirmo/practical-logger-core/src/consts-base.ts","../node_modules/@offirmo/practical-logger-core/src/consts.ts","../node_modules/@offirmo/practical-logger-core/src/normalize-args.ts","../node_modules/@offirmo/practical-logger-core/src/core.ts","../node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-core/src/index.ts","../node_modules/@offirmo/practical-logger-core/doc/shared-demo.js","index.ts"],"names":["require","ALL_LOG_LEVELS","demo_legacy_console","console","log","debug","level","foo","info","warn","error","demo_logger_basic_usage","logger","in_group","silly","trace","version","verbose","user","firstName","lastName","age","elapsedMs","err","Error","httpStatus","undefined","groupEnd","demo_logger_levels","reverse","forEach","demo_group","group","groupCollapsed","demo_incorrect_logger_invocations","bob","demo_logger_api","getLogger","suggestedLevel","name","demo_error","bar","statusCode","details","hello","some","demo_devtools_fonts","font","module","exports"],"mappings":"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","file":"src.ba9a2dff.js","sourceRoot":"../src","sourcesContent":["\nexport default function tiny_singleton<T extends (...args: any) => any>(generator: T): (...args: Parameters<T>) => ReturnType<T> {\n\tlet instantiated = false\n\tlet instance: undefined | ReturnType<T>\n\n\treturn function get(...args: any) {\n\t\tif (!instantiated) {\n\t\t\tinstance = generator(...args)\n\t\t\tinstantiated = true\n\t\t}\n\n\t\treturn instance as ReturnType<T>\n\t}\n}\n\nexport { tiny_singleton }\n","// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\n\nimport { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = 'error'\nexport const DEFAULT_LOGGER_KEY = '' // yes, can be used as a key\n","import { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const LIB = '@offirmo/practical-logger-core'\n\n// level to a numerical value, for ordering and filtering.\n// mnemonic:  100 = 100% = you will see 100% of the logs\n//              1 =   1% = you will see 1% of the logs (obviously the most important)\nexport const LOG_LEVEL_TO_INTEGER: Readonly<{ [k: string]: number }> = {\n\tfatal:    1,\n\temerg:    2,\n\n\talert:   10,\n\tcrit:    20,\n\terror:   30,\n\n\twarning: 40,\n\twarn:    40,\n\n\tnotice:  45,\n\n\tinfo:    50,\n\n\tverbose: 70,\n\tlog:     80,\n\tdebug:   81,\n\n\ttrace:   90,\n\n\tsilly:  100,\n}\n\nexport const ALL_LOG_LEVELS: Readonly<LogLevel[]> =\n\tObject.keys(LOG_LEVEL_TO_INTEGER)\n\t\t.map(s => s as LogLevel)\n\t\t.sort((a: LogLevel, b: LogLevel) => LOG_LEVEL_TO_INTEGER[a] - LOG_LEVEL_TO_INTEGER[b])\n\n// rationalization to a clear, human understandable string\n// generated to shave a few bytes\n// not using fromEntries bc not available in node <12\nexport const LOG_LEVEL_TO_HUMAN: Readonly<{ [k: string]: string }> = ALL_LOG_LEVELS.reduce((acc, ll) => {\n\tacc[ll] = ({ em: 'emergency', wa: 'warn'} as any)[ll.slice(0, 1)] || ll\n\treturn acc\n}, {} as any)\n\nexport * from './consts-base'\n","import {\n\tLogDetails,\n} from '@offirmo/practical-logger-types'\n\n\nexport function looksLikeAnError(x: any): boolean {\n\treturn !!(x?.name && x?.message && x?.stack)\n}\n\n// harmonize\n// also try to recover from incorrect invocations\nexport function normalizeArguments(raw_args: IArguments): [ string, LogDetails ] {\n\tconst message_parts: string[] = []\n\tlet details: LogDetails = {}\n\tlet err: Error | undefined = undefined\n\n\tArray.from(raw_args)\n\t\t.forEach(arg => {\n\t\t\tif (!arg)\n\t\t\t\treturn\n\n\t\t\t// errors are first class, look for them first\n\t\t\tif (looksLikeAnError(arg)) {\n\t\t\t\tif (!err)\n\t\t\t\t\terr = arg // extract it\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!err && looksLikeAnError(arg.err)) {\n\t\t\t\terr = arg.err // extract it\n\t\t\t\t// don't return, still stuff to pick\n\t\t\t}\n\n\t\t\tif (typeof arg === 'object') {\n\t\t\t\tdetails = {\n\t\t\t\t\t...details,\n\t\t\t\t\t...arg,\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmessage_parts.push(String(arg))\n\t\t})\n\n\tif (typeof details.message === 'string' && !message_parts.length) {\n\t\tmessage_parts.push(details.message)\n\t\tdelete details.message\n\t}\n\n\tconst message = message_parts.join(' ') || (err as any)?.message || '(no message)'\n\tif (err)\n\t\tdetails.err = err\n\telse\n\t\tdelete details.err // because could be present but not be a correct err type\n\n\treturn [ message, details ]\n}\n\n","import {\n\tLogLevel,\n\tBaseInternalLoggerState,\n\tLogger,\n\tLoggerCreationParams,\n\tLogDetails,\n\tLogPayload,\n\tLogPrimitive,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLIB,\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nimport { normalizeArguments } from './normalize-args'\n\nexport function checkLevel(level: any): asserts level is LogLevel {\n\tif (!ALL_LOG_LEVELS.includes(level))\n\t\tthrow new Error(`[${LIB}] Not a valid log level: \"${level}\"!`)\n}\n\nexport function create(\n\t{\n\t\tname = DEFAULT_LOGGER_KEY,\n\t\tsuggestedLevel = DEFAULT_LOG_LEVEL,\n\t\tforcedLevel,\n\t\tcommonDetails = {},\n\t}: LoggerCreationParams = {},\n\toutputFn: LogSink = console.log,\n): Logger {\n\n\tconst internalState: BaseInternalLoggerState = {\n\t\tname,\n\t\tlevel: forcedLevel || suggestedLevel,\n\t\tcommonDetails: {...commonDetails},\n\t\toutputFn,\n\t}\n\n\tlet levelAsInt = 100 // so far\n\n\tconst logger: Logger = ALL_LOG_LEVELS.reduce(\n\t\t(logger: any, level: LogLevel) => {\n\t\t\tconst primitive: LogPrimitive = function (rawMessage?: string, rawDetails?: LogDetails) {\n\t\t\t\tif (!isLevelEnabled(level)) return\n\n\t\t\t\tconst [ message, details ] = normalizeArguments(arguments)\n\n\t\t\t\tinternalState.outputFn(serializer(level, message, details))\n\t\t\t}\n\n\t\t\tlogger[level] = primitive\n\n\t\t\treturn logger\n\t\t},\n\t\t{\n\t\t\tsetLevel,\n\t\t\tgetLevel,\n\t\t\taddCommonDetails,\n\t\t\tgroup() {},\n\t\t\tgroupCollapsed() {},\n\t\t\tgroupEnd() {},\n\t\t},\n\t)\n\n\tfunction setLevel(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\tinternalState.level = level\n\t\tlevelAsInt = LOG_LEVEL_TO_INTEGER[level]\n\t}\n\tsetLevel(getLevel()) // to check it\n\n\tfunction isLevelEnabled(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\treturn LOG_LEVEL_TO_INTEGER[level] <= levelAsInt\n\t}\n\n\tfunction getLevel() {\n\t\treturn internalState.level\n\t}\n\n\tfunction addCommonDetails(details: Readonly<LogDetails>): void {\n\t\tif (details.err)\n\t\t\tthrow new Error(`[${LIB}] Can't set reserved property \"err\"!`)\n\n\t\tinternalState.commonDetails = {\n\t\t\t...internalState.commonDetails,\n\t\t\t...details,\n\t\t}\n\t}\n\n\tfunction serializer(level: LogLevel, msg: string, { err, ...details }: Readonly<LogDetails>): LogPayload {\n\t\tconst payload: LogPayload = {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tmsg,\n\t\t\ttime: +(new Date()), // UTC timestamp\n\t\t\tdetails: {\n\t\t\t\t...internalState.commonDetails,\n\t\t\t\t...details,\n\t\t\t},\n\t\t}\n\t\tif (err)\n\t\t\tpayload.err = err\n\n\t\treturn payload\n\t}\n\n\treturn logger\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { create as createLogger } from './core'\nexport { createLogger }\n\nexport * from '@offirmo/practical-logger-types'\n\nexport {\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tLOG_LEVEL_TO_HUMAN,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nexport { checkLevel } from './core'\nexport * from './normalize-args'\n\n","import { LogLevel, LOG_LEVEL_TO_HUMAN } from '@offirmo/practical-logger-core'\n\nexport const LEVEL_TO_CONSOLE_METHOD: Readonly<{ [k: string]: string }> = {\n\tfatal:   'error',\n\temerg:   'error',\n\talert:   'error',\n\tcrit:    'error',\n\n\terror:   'error',\n\n\twarning: 'warn',\n\twarn:    'warn',\n\n\tnotice:  'info',\n\tinfo:    'info',\n\tverbose: 'info',\n\n\tlog:     'log',\n\n\tdebug:   'debug',\n\ttrace:   'debug',\n\tsilly:   'debug',\n}\n\n\nconst MIN_WIDTH = 5\nexport function to_uniform_level(level: LogLevel): string {\n\tlet str = LOG_LEVEL_TO_HUMAN[level] //.slice(0, MIN_WIDTH)\n\t//if (str.length < MIN_WIDTH)\n\tstr = (str + '         ').slice(0, MIN_WIDTH)\n\treturn str\n}\n","import {\n\tLogPayload,\n} from '@offirmo/practical-logger-types'\n\nconst FONT_FAMILY_BETTER_PROPORTIONAL = 'font-family: ' + [\n\t'-apple-system',\n\t'BlinkMacSystemFont', // good sans-serif available in blink = Chrome\n\t'noto',\n\t'roboto',\n\t'sans-serif',\n\t//'unset', // default back to the devtools one\n].join(', ')\n\nconst FONT_FAMILY_BETTER_MONOSPACE = 'font-family: ' + [\n\t'\"Fira Code\"',\n\t'Menlo', // default chrome devtools one\n\t'Consolas',\n\t'monospace',\n].join(', ')\n\n\nconst LEVEL_TO_COLOR_STYLE: Readonly<{ [k: string]: string }> = {\n\t// empty = no need, console method already covers it well\n\tfatal:   '',\n\temerg:   '',\n\talert:   '',\n\tcrit:    '',\n\n\terror:   '',\n\n\twarning: '',\n\twarn:    '',\n\n\tnotice:  'color: #659AD2',\n\tinfo:    'color: #659AD2',\n\tverbose: 'color: #659AD2',\n\n\tlog:     '',\n\n\tdebug:   'color: #9AA2AA',\n\ttrace:   'color: #9AA2AA',\n\tsilly:   'color: #9AA2AA',\n}\n\n\nfunction add_styled_string(line: string[], chunk: string, ...styles: string[]): string[] {\n\tconst [ existing_chunks, ...existing_chunks_styles ] = line\n\treturn [\n\t\texisting_chunks + '%c' + chunk,\n\t\t...existing_chunks_styles,\n\t\tstyles.join(';') + ';',\n\t]\n}\n\nfunction build_args(line: any[], payload: Readonly<LogPayload>): any[] {\n\tconst { err } = payload\n\tlet { details } = payload\n\n\tconst args = line\n\tif (err) {\n\t\t// err will be passed as the LAST arg for reasons (see below)\n\t\t// however the \"last arg\" display doesn't allow examining the optional err properties\n\t\t// so we also add the err to the details:\n\t\t// (tested on FF/Chrome/Safari)\n\t\tdetails = {\n\t\t\t...details,\n\t\t\terr,\n\t\t}\n\t}\n\n\tif (Object.keys(details).length)\n\t\targs.push(details)\n\n\t// err *as an arg* triggers a good display of the stacktrace\n\t// however it should be LAST because it takes a lot of room and \"hides\" further args\n\t// (tested on FF/Chrome/Safari)\n\tif (err)\n\t\targs.push(err)\n\n\treturn args\n}\n\nexport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n}\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 10px'\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg, err, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .35em', 'margin-right: .5em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error' || console_method_name === 'warn'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 8px'\nconst MESSAGE_FONT_SIZE_STYLE = 'font-size: 11px'\n\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg, err, details: details_orginal } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .1em', 'margin-right: .2em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL, MESSAGE_FONT_SIZE_STYLE)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL, MESSAGE_FONT_SIZE_STYLE)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common'\n\nfunction has_details_indicator(console_method_name: string, details: any): boolean {\n\treturn details || console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 9px'\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg, err, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name, details)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 10px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .15em', 'margin-right: .4em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport { SinkOptions } from '../types'\nimport { LEVEL_TO_CONSOLE_METHOD, to_uniform_level } from './common'\n\n\nexport default function create(options: Readonly<SinkOptions> = {}): LogSink {\n\treturn (payload: LogPayload): void => {\n\t\tconst { level, name, msg, err, details } = payload\n\t\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\t\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\t\tconst line = ['[', to_uniform_level(level), '] ']\n\n\t\tif (name) {\n\t\t\tline.push(`${name} › `)\n\t\t}\n\t\tline.push(msg)\n\n\t\tconst args: any[] = line\n\t\tif (Object.keys(details).length)\n\t\t\targs.push(details)\n\t\t// err should be last because it takes a lot of room and \"hides\" further args\n\t\tif (err)\n\t\t\targs.push(err)\n\n\t\tconsole_method(...args)\n\t}\n}\n","import { LogSink } from '@offirmo/practical-logger-types'\n\nimport { Browser, SinkOptions } from '../types'\nimport sink_firefox from './advanced/firefox'\nimport sink_chromium from './advanced/chromium'\nimport sink_safari from './advanced/safari'\nimport create_sink_no_css from './no-css'\n\n// TODO export that?\nfunction quick_detect_browser(): Browser {\n\t// https://stackoverflow.com/a/9851769/587407\n\t// https://dev.to/_elmahdim/safe-reliable-browser-sniffing-39bp\n\n\ttry {\n\t\tif ((window as any).InstallTrigger)\n\t\t\treturn 'firefox'\n\n\t\tif ((window as any).ApplePaySession)\n\t\t\treturn 'safari'\n\n\t\tif ((window as any).chrome)\n\t\t\treturn 'chromium'\n\t}\n\tcatch {\n\t\t/* ignore */\n\t}\n\n\treturn 'other'\n}\n\n\nexport function create(options: Readonly<SinkOptions> = {}): LogSink {\n\tif (options.useCss === false)\n\t\treturn create_sink_no_css(options)\n\n\tswitch(options.explicitBrowser || quick_detect_browser()) {\n\t\tcase 'firefox':\n\t\t\treturn sink_firefox\n\t\tcase 'safari':\n\t\t\treturn sink_safari\n\t\tcase 'chromium':\n\t\t\treturn sink_chromium\n\t\tdefault:\n\t\t\treturn create_sink_no_css(options)\n\t}\n}\n","// Note: the name of this file is because it appears in the dev tools!\n\nconst PATCHED_METHODS = [ 'debug', 'log', 'info', 'warn', 'error', 'group', 'groupCollapsed', 'groupEnd' ]\n\ninterface GroupInvocation {\n\tparams: any[]\n\tis_deployed: boolean\n\tis_effective: boolean\n}\n\ninterface Options {\n\tuncollapse_level?: 'warn' | 'error',\n\tlazy?: boolean\n\toriginal_console?: Console,\n}\n\nconst DEBUG = false\n\nfunction install({ uncollapse_level = 'warn', lazy = true, original_console = console }: Options = {}): void {\n\tif (DEBUG) console.log('install', { uncollapse_level, lazy })\n\n\tconst group_invocations: GroupInvocation[] = []\n\t// in node, group() calls console.log()\n\t// to prevent infinite loops\n\tlet in_original_call = false\n\n\tconst ORIGINAL_METHODS: { [k: string]: (...p: any[]) => void } = {}\n\tPATCHED_METHODS.forEach(k => {\n\t\tORIGINAL_METHODS[k] = (original_console as any)[k]\n\t})\n\n\tfunction better_group(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS.log('>>> before group', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tgroup_invocations.push({\n\t\t\tparams: p,\n\t\t\tis_deployed: true,\n\t\t\tis_effective: !lazy,\n\t\t})\n\t\tif (!lazy) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS.group(...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS.log('<<< after group', { depth: group_invocations.length})\n\t}\n\tfunction better_groupCollapsed(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS.log('>>> before groupCollapsed', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tgroup_invocations.push({\n\t\t\tparams: p,\n\t\t\tis_deployed: false,\n\t\t\tis_effective: !lazy,\n\t\t})\n\t\tif (!lazy) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS.groupCollapsed(...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS.log('after groupCollapsed', { depth: group_invocations.length})\n\t}\n\tfunction better_groupEnd(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS.log('>>> before groupEnd', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tconst last_invocation = group_invocations.pop()\n\t\tif (last_invocation&& last_invocation.is_effective) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS.groupEnd(...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS.log('<<< after groupEnd', { lazy, depth: group_invocations.length})\n\t}\n\n\tfunction better_output(original_method: Console['log'], uncollapse: boolean, ...p: any[]): void {\n\t\tif (in_original_call) {\n\t\t\treturn original_method(...p)\n\t\t}\n\t\tif (DEBUG) original_method('>>> before output', { depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\t// lazily create groups\n\t\t// cancel collapsed if needed\n\t\tgroup_invocations.forEach(invocation => {\n\t\t\tconst { is_effective, is_deployed, params } = invocation\n\t\t\tif (is_effective) return\n\n\t\t\tif (DEBUG) original_method('--- lazy call')\n\n\t\t\tif (uncollapse || is_deployed) {\n\t\t\t\tin_original_call = true\n\t\t\t\tORIGINAL_METHODS.group(...params)\n\t\t\t\tin_original_call = false\n\t\t\t\tinvocation.is_deployed = true\n\t\t\t}\n\t\t\telse {\n\t\t\t\tin_original_call = true\n\t\t\t\tORIGINAL_METHODS.groupCollapsed(...params)\n\t\t\t\tin_original_call = false\n\t\t\t\tinvocation.is_deployed = false\n\t\t\t}\n\t\t\tinvocation.is_effective = true\n\t\t})\n\n\t\tif (DEBUG) original_method('--- output')\n\n\t\t// uncollapse parents if needed\n\t\tif (uncollapse) {\n\t\t\tconst lowest_uncollapsed_index = group_invocations.findIndex(\n\t\t\t\t({ is_deployed }) => !is_deployed,\n\t\t\t)\n\t\t\twhile (\n\t\t\t\tlowest_uncollapsed_index >= 0\n\t\t\t\t&& group_invocations.length\n\t\t\t\t&& group_invocations.length > lowest_uncollapsed_index\n\t\t\t) {\n\t\t\t\tbetter_groupEnd()\n\t\t\t\tORIGINAL_METHODS.debug('(forced break out of group ↑ due to error)')\n\t\t\t}\n\t\t}\n\n\t\tif (DEBUG) original_method('--- output')\n\n\t\toriginal_method(...p)\n\t\tif (DEBUG) original_method('<<<after output', { depth: group_invocations.length})\n\t}\n\n\tconsole.group = better_group\n\tconsole.groupCollapsed = better_groupCollapsed\n\tconsole.groupEnd = better_groupEnd\n\n\tconsole.debug = better_output.bind(null, ORIGINAL_METHODS.debug, false)\n\tconsole.log = better_output.bind(null, ORIGINAL_METHODS.log, false)\n\tconsole.info = better_output.bind(null, ORIGINAL_METHODS.info, false)\n\tconsole.warn = better_output.bind(null, ORIGINAL_METHODS.warn, uncollapse_level === 'warn')\n\tconsole.error = better_output.bind(null, ORIGINAL_METHODS.error, true)\n}\n\nexport { install as improve_console_groups }\nexport default install\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import tiny_singleton from '@offirmo/tiny-singleton'\nimport { LogSink, Logger, LoggerCreationParams } from '@offirmo/practical-logger-types'\nimport { createLogger as createLoggerCore } from '@offirmo/practical-logger-core'\n\nimport { SinkOptions } from './types'\nimport { create } from './sinks'\nimport improve_console_groups from './better-console-groups/practical-logger'\n\nconst ORIGINAL_CONSOLE = console\n\n\nconst install_groups_or_not_once_for_all = tiny_singleton((active: boolean) => { if (active) improve_console_groups() })\n\nfunction createLogger(p: Readonly<LoggerCreationParams<SinkOptions>> = {}): Logger {\n\tinstall_groups_or_not_once_for_all(p.sinkOptions?.betterGroups !== false)\n\n\tconst sink: LogSink = p.sinkOptions?.sink || create(p.sinkOptions)\n\n\tconst { group, groupCollapsed, groupEnd } = ORIGINAL_CONSOLE\n\treturn {\n\t\t...createLoggerCore(p, sink),\n\t\tgroup,\n\t\tgroupCollapsed,\n\t\tgroupEnd,\n\t}\n}\n\n\nexport {\n\tcreateLogger,\n}\n\nexport * from '@offirmo/practical-logger-types'\nexport { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_KEY } from '@offirmo/practical-logger-core'\n","// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\n\nimport { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = 'error'\nexport const DEFAULT_LOGGER_KEY = '' // yes, can be used as a key\n","import { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const LIB = '@offirmo/practical-logger-core'\n\n// level to a numerical value, for ordering and filtering.\n// mnemonic:  100 = 100% = you will see 100% of the logs\n//              1 =   1% = you will see 1% of the logs (obviously the most important)\nexport const LOG_LEVEL_TO_INTEGER: Readonly<{ [k: string]: number }> = {\n\tfatal:    1,\n\temerg:    2,\n\n\talert:   10,\n\tcrit:    20,\n\terror:   30,\n\n\twarning: 40,\n\twarn:    40,\n\n\tnotice:  45,\n\n\tinfo:    50,\n\n\tverbose: 70,\n\tlog:     80,\n\tdebug:   81,\n\n\ttrace:   90,\n\n\tsilly:  100,\n}\n\nexport const ALL_LOG_LEVELS: Readonly<LogLevel[]> =\n\tObject.keys(LOG_LEVEL_TO_INTEGER)\n\t\t.map(s => s as LogLevel)\n\t\t.sort((a: LogLevel, b: LogLevel) => LOG_LEVEL_TO_INTEGER[a] - LOG_LEVEL_TO_INTEGER[b])\n\n// rationalization to a clear, human understandable string\n// generated to shave a few bytes\n// not using fromEntries bc not available in node <12\nexport const LOG_LEVEL_TO_HUMAN: Readonly<{ [k: string]: string }> = ALL_LOG_LEVELS.reduce((acc, ll) => {\n\tacc[ll] = ({ em: 'emergency', wa: 'warn'} as any)[ll.slice(0, 1)] || ll\n\treturn acc\n}, {} as any)\n\nexport * from './consts-base'\n","import {\n\tLogDetails,\n} from '@offirmo/practical-logger-types'\n\n\nexport function looksLikeAnError(x: any): boolean {\n\treturn !!(x?.name && x?.message && x?.stack)\n}\n\n// harmonize\n// also try to recover from incorrect invocations\nexport function normalizeArguments(raw_args: IArguments): [ string, LogDetails ] {\n\tconst message_parts: string[] = []\n\tlet details: LogDetails = {}\n\tlet err: Error | undefined = undefined\n\n\tArray.from(raw_args)\n\t\t.forEach(arg => {\n\t\t\tif (!arg)\n\t\t\t\treturn\n\n\t\t\t// errors are first class, look for them first\n\t\t\tif (looksLikeAnError(arg)) {\n\t\t\t\tif (!err)\n\t\t\t\t\terr = arg // extract it\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!err && looksLikeAnError(arg.err)) {\n\t\t\t\terr = arg.err // extract it\n\t\t\t\t// don't return, still stuff to pick\n\t\t\t}\n\n\t\t\tif (typeof arg === 'object') {\n\t\t\t\tdetails = {\n\t\t\t\t\t...details,\n\t\t\t\t\t...arg,\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmessage_parts.push(String(arg))\n\t\t})\n\n\tif (typeof details.message === 'string' && !message_parts.length) {\n\t\tmessage_parts.push(details.message)\n\t\tdelete details.message\n\t}\n\n\tconst message = message_parts.join(' ') || (err as any)?.message || '(no message)'\n\tif (err)\n\t\tdetails.err = err\n\telse\n\t\tdelete details.err // because could be present but not be a correct err type\n\n\treturn [ message, details ]\n}\n\n","import {\n\tLogLevel,\n\tBaseInternalLoggerState,\n\tLogger,\n\tLoggerCreationParams,\n\tLogDetails,\n\tLogPayload,\n\tLogPrimitive,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLIB,\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nimport { normalizeArguments } from './normalize-args'\n\nexport function checkLevel(level: any): asserts level is LogLevel {\n\tif (!ALL_LOG_LEVELS.includes(level))\n\t\tthrow new Error(`[${LIB}] Not a valid log level: \"${level}\"!`)\n}\n\nexport function create(\n\t{\n\t\tname = DEFAULT_LOGGER_KEY,\n\t\tsuggestedLevel = DEFAULT_LOG_LEVEL,\n\t\tforcedLevel,\n\t\tcommonDetails = {},\n\t}: LoggerCreationParams = {},\n\toutputFn: LogSink = console.log,\n): Logger {\n\n\tconst internalState: BaseInternalLoggerState = {\n\t\tname,\n\t\tlevel: forcedLevel || suggestedLevel,\n\t\tcommonDetails: {...commonDetails},\n\t\toutputFn,\n\t}\n\n\tlet levelAsInt = 100 // so far\n\n\tconst logger: Logger = ALL_LOG_LEVELS.reduce(\n\t\t(logger: any, level: LogLevel) => {\n\t\t\tconst primitive: LogPrimitive = function (rawMessage?: string, rawDetails?: LogDetails) {\n\t\t\t\tif (!isLevelEnabled(level)) return\n\n\t\t\t\tconst [ message, details ] = normalizeArguments(arguments)\n\n\t\t\t\tinternalState.outputFn(serializer(level, message, details))\n\t\t\t}\n\n\t\t\tlogger[level] = primitive\n\n\t\t\treturn logger\n\t\t},\n\t\t{\n\t\t\tsetLevel,\n\t\t\tgetLevel,\n\t\t\taddCommonDetails,\n\t\t\tgroup() {},\n\t\t\tgroupCollapsed() {},\n\t\t\tgroupEnd() {},\n\t\t},\n\t)\n\n\tfunction setLevel(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\tinternalState.level = level\n\t\tlevelAsInt = LOG_LEVEL_TO_INTEGER[level]\n\t}\n\tsetLevel(getLevel()) // to check it\n\n\tfunction isLevelEnabled(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\treturn LOG_LEVEL_TO_INTEGER[level] <= levelAsInt\n\t}\n\n\tfunction getLevel() {\n\t\treturn internalState.level\n\t}\n\n\tfunction addCommonDetails(details: Readonly<LogDetails>): void {\n\t\tif (details.err)\n\t\t\tthrow new Error(`[${LIB}] Can't set reserved property \"err\"!`)\n\n\t\tinternalState.commonDetails = {\n\t\t\t...internalState.commonDetails,\n\t\t\t...details,\n\t\t}\n\t}\n\n\tfunction serializer(level: LogLevel, msg: string, { err, ...details }: Readonly<LogDetails>): LogPayload {\n\t\tconst payload: LogPayload = {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tmsg,\n\t\t\ttime: +(new Date()), // UTC timestamp\n\t\t\tdetails: {\n\t\t\t\t...internalState.commonDetails,\n\t\t\t\t...details,\n\t\t\t},\n\t\t}\n\t\tif (err)\n\t\t\tpayload.err = err\n\n\t\treturn payload\n\t}\n\n\treturn logger\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { create as createLogger } from './core'\nexport { createLogger }\n\nexport * from '@offirmo/practical-logger-types'\n\nexport {\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tLOG_LEVEL_TO_HUMAN,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nexport { checkLevel } from './core'\nexport * from './normalize-args'\n\n","const { ALL_LOG_LEVELS } = require('..')\n\nfunction demo_legacy_console() {\n\tconsole.log('------------↓ For comparison: Legacy console: levels, in order ↓-----------')\n\tconsole.debug('Legacy console > message with level \"debug\"', { level: 'debug', foo: 42 })\n\tconsole.log('Legacy console > message with level \"log\"', { level: 'log', foo: 42 })\n\tconsole.info('Legacy console > message with level \"info\"', { level: 'info', foo: 42 })\n\tconsole.warn('Legacy console > message with level \"warn\"', { level: 'warn', foo: 42 })\n\tconsole.error('Legacy console > message with level \"error\"', { level: 'error', foo: 42 })\n}\n\n\nfunction demo_logger_basic_usage(logger, in_group = true) {\n\tconsole[in_group ? 'group' : 'log']('------------↓ Practical logger demo: example real usage ↓------------')\n\n\tlogger.silly('Hi!')\n\tlogger.trace('App starting...', { version: '1.2.3' })\n\n\tconst bob = {\n\t\tfirstName: 'Bob',\n\t\tlastName: 'Dupont',\n\t\tage: 42,\n\t}\n\n\tlogger.verbose('Current user already logged in', { user: bob })\n\n\tlogger.verbose('Restoring state from cloud…')\n\n\tlogger.warn('Restoration of state is taking more time than expected', { elapsedMs: 3000 })\n\n\tconst err = new Error('Timeout loading state!')\n\terr.httpStatus = 418 // to check that custom props are preserved\n\n\tlogger.error(undefined, err)\n\n\tlogger.info('Reverting to last known local state')\n\n\tif (in_group) console.groupEnd()\n}\n\nfunction demo_logger_levels(logger) {\n\tconsole.log('------------↓ Practical logger demo: all levels, in order ↓------------')\n\t;[...ALL_LOG_LEVELS].reverse().forEach(level =>\n\t\tlogger[level](`message with level \"${level}\"`, { level, foo: 42 }),\n\t)\n\n\t/*\nconsole.groupCollapsed('in group')\nALL_LOG_LEVELS.forEach(level =>\n    logger[level](`msg with level \"${level}\"`)\n)\nconsole.groupEnd()\n*/\n}\n\nfunction demo_group(logger) {\n\tconsole.log('------------↓ logger demo: group ↓------------')\n\n\tlogger.group('level 1 (NOT collapsed)')\n\t\tlogger.log('in level 1')\n\n\t\tlogger.groupCollapsed('level 2a (collapsed)')\n\t\t\tlogger.log('in level 2a')\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2b (collapsed)')\n\t\t\t// no output\n\t\t\tlogger.group('level 3a (NOT collapsed)')\n\t\t\t\t// no output\n\t\t\tlogger.groupEnd()\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2c (collapsed)')\n\t\t\t// no output\n\t\t\tlogger.warn('warn from level 2c!')\n\t\t\tlogger.error(new Error('error from level 2c!'))\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2d (collapsed)')\n\t\t\tlogger.log('in level 2d')\n\t\t\tlogger.group('level 3b (NOT collapsed)')\n\t\t\t\tlogger.warn('warn from level 3b!')\n\t\t\t\tlogger.error(new Error('error from level 3b!'))\n\t\t\t\tlogger.log('in level 3b')\n\t\t\tlogger.groupEnd()\n\t\t\tlogger.log('in level 2d')\n\t\tlogger.groupEnd()\n\n\t\tlogger.log('where am I? (should be in level 1)')\n\tlogger.groupEnd()\n\n\tlogger.groupEnd()\n\tlogger.groupEnd()\n}\n\nfunction demo_incorrect_logger_invocations(logger) {\n\tconst bob = {\n\t\tfirstName: 'Bob',\n\t\tlastName: 'Dupont',\n\t\tage: 42,\n\t}\n\n\tconst more = 'some stuff'\n\n\tconst err = new Error('Timeout loading state!')\n\terr.httpStatus = 418 // to check that custom props are preserved\n\n\tconsole.group('------------↓ logger demo: incorrect invocation (bunyan style) ↓------------')\n\tlogger.info()\n\n\tlogger.info('hi')\n\tlogger.info('hi %s', bob, more)\n\n\tlogger.info({foo: 'bar'}, 'hi')\n\n\tlogger.info(err)\n\tlogger.info(err, 'more on this: %s', more)\n\n\tlogger.info({foo: 'bar', err: err}, 'some msg about this error')\n\tlogger.warn('foo', 'bar', 42)\n\tconsole.groupEnd()\n}\n\nfunction demo_logger_api(getLogger) {\n\tconsole.log('------------↓ logger creation and basic usage ↓------------')\n\tconst root_logger = getLogger({\n\t\tsuggestedLevel: 'silly',\n\t})\n\troot_logger.log('Starting up')\n\n\tconst logger = getLogger({\n\t\tname: 'Persistence',\n\t\tsuggestedLevel: 'silly',\n\t})\n\n\tdemo_logger_basic_usage(logger)\n\n\tdemo_logger_levels(logger)\n\n\tdemo_group(logger)\n\n\tdemo_incorrect_logger_invocations(logger)\n}\n\nfunction demo_error(logger, in_group = true) {\n\tconsole[in_group ? 'group' : 'log']('------------↓ logger demo: error display ↓------------')\n\n\tfunction foo() {\n\t\tfunction bar() {\n\t\t\tconst err = new Error('Test error!')\n\t\t\terr.statusCode = 1234\n\t\t\terr.details = {\n\t\t\t\thello: 42,\n\t\t\t}\n\n\t\t\tthrow err\n\t\t}\n\t\tbar()\n\t}\n\n\ttry {\n\t\tfoo()\n\t}\n\tcatch (err) {\n\t\tlogger.log(err)\n\t\tlogger.log('message', err)\n\t\tlogger.log('message', { some: 'stuff', err })\n\t\tlogger.error(err)\n\t\tlogger.error('message', err)\n\t\tlogger.error('message', { some: 'stuff', err })\n\t\t//logger.error('message', { some: 'stuff' }, err)\n\t\t//logger.error('message', err, { some: 'stuff' })\n\t\tlogger.error('message', { some: 'stuff' })\n\t}\n\n\tif (in_group) console.groupEnd()\n}\n\nfunction demo_devtools_fonts() {\n\tconsole.group('------------↓ available font styles ↓------------')\n\tconsole.log('default: ABCdef012')\n\n\t;[\n\t\t'-apple-system',\n\t\t'BlinkMacSystemFont',\n\t\t'\"avenir next\"',\n\t\t'avenir',\n\t\t'\"Segoe UI\"',\n\t\t'\"lucida grande\"',\n\t\t'\"helvetica neue\"',\n\t\t'helvetica',\n\t\t'\"Fira Sans\"',\n\t\t'roboto',\n\t\t//'noto',\n\t\t//'\"Droid Sans\"',\n\t\t//'cantarell',\n\t\t//'oxygen',\n\t\t//'ubuntu',\n\t\t//'\"franklin gothic medium\"',\n\t\t//'\"century gothic\"',\n\t\t'\"Liberation Sans\"',\n\t\t'sans-serif',\n\t\t'\"dejavu sans mono\"',\n\t\t'\"Fira Code\"',\n\t\t'Menlo',\n\t\t'Consolas',\n\t\t'\"Lucida Console\"',\n\t\t'\"Courier New\"',\n\t\t'monospace',\n\t].forEach(font => console.log(`%c${font}: ABCdefi012 %cABCdefi012`, `font-family: ${font};`, 'font-family: unset;'))\n\tconsole.groupEnd()\n}\n\nmodule.exports = {\n\tdemo_legacy_console,\n\tdemo_logger_basic_usage,\n\tdemo_logger_levels,\n\tdemo_error,\n\tdemo_group,\n\tdemo_incorrect_logger_invocations,\n\tdemo_logger_api,\n\tdemo_devtools_fonts,\n}\n","import { createLogger } from '@offirmo/practical-logger-browser'\n\nimport {\n\tdemo_logger_basic_usage,\n\tdemo_logger_levels,\n\tdemo_error,\n\tdemo_group,\n\tdemo_logger_api,\n\n\tdemo_incorrect_logger_invocations,\n\tdemo_legacy_console,\n\tdemo_devtools_fonts,\n} from '@offirmo/practical-logger-core/doc/shared-demo'\n\n//demo_legacy_console()\n\nconst logger = createLogger({\n\tsuggestedLevel: 'warn',\n})\nlogger.log('hello from logger!')\n\nconst demoLogger = createLogger({\n\tname: 'Demo',\n\tsuggestedLevel: 'silly',\n})\ndemoLogger.log('hello from demoLogger!', { bar: 42, baz: 33 })\n\nconst state = {\n\ttarget: undefined as undefined | 'browser' | 'node' | 'module',\n\tlast_demo_launched: null as null | string,\n}\n\nconst target_envs = [\n\t'browser',\n\t'node',\n\t'module',\n]\n\nconst demos = {\n\t'all-levels': (l) => {\n\t\tdemo_legacy_console()\n\t\tdemo_logger_levels(l)\n\t},\n\t'basic': (l) => demo_logger_basic_usage(l, false),\n\t'error': (l) => demo_error(l, false),\n\t'groups': demo_group,\n}\n\nfunction run_demo(demo_id: string) {\n\tdemos[demo_id](demoLogger)\n\tstate.last_demo_launched = demo_id\n}\n\nfunction render() {\n\tObject.keys(demos).forEach(demo_id => {\n\t\tdocument.getElementById(`demo-${demo_id}`).removeAttribute('open')\n\t})\n\tif (state.last_demo_launched) {\n\t\tdocument.getElementById(`demo-${state.last_demo_launched}`).setAttribute('open', 'true')\n\t}\n\n\ttarget_envs.forEach(demo_id => {\n\t})\n}\nrender()\n\n/// event delegation\ndocument.addEventListener('click', event => {\n\tresolution: {\n\t\ttry {\n\t\t\tconst { target: clickedElement } = event\n\t\t\tif (!clickedElement)\n\t\t\t\tthrow new Error('click event has no target!')\n\n\t\t\tconst demo_id = Object.keys(demos).find(id => clickedElement.matches(`#btn-demo-${id}`))\n\t\t\tif (demo_id) {\n\t\t\t\trun_demo(demo_id)\n\t\t\t\tbreak resolution\n\t\t\t}\n\n\t\t\tlogger.trace('Event delegation: unknown click target:', { clickedElement })\n\t\t} catch (err) {\n\t\t\tlogger.error('processingClick', { err })\n\t\t}\n\t}\n\n\trender()\n})\n"]}