{"version":3,"sources":["../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/globalthis-ponyfill/src/index.ts","../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/practical-logger-minimal-noop/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/practical-logger-minimal-noop/src/index.ts","../node_modules/@offirmo/universal-debug-api-placeholder/src/v1.ts","../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/universal-debug-api-interface/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/universal-debug-api-interface/src/v1.ts","../node_modules/@offirmo/universal-debug-api-placeholder/node_modules/@offirmo/universal-debug-api-interface/src/index.ts","../node_modules/@offirmo/universal-debug-api-placeholder/src/index.ts","../node_modules/@offirmo/practical-logger-core/src/consts-base.ts","../node_modules/@offirmo/practical-logger-core/src/consts.ts","../node_modules/@offirmo/practical-logger-core/src/normalize-args.ts","../node_modules/@offirmo/practical-logger-core/src/core.ts","../node_modules/@offirmo/practical-logger-core/node_modules/@offirmo/practical-logger-types/src/index.ts","../node_modules/@offirmo/practical-logger-core/src/index.ts","../node_modules/@offirmo/practical-logger-core/doc/shared-demo.js","index.ts"],"names":["ALL_LOG_LEVELS","require","demo_legacy_console","console","log","debug","level","foo","info","warn","error","demo_logger_basic_usage","logger","in_group","silly","trace","version","verbose","user","firstName","lastName","age","elapsedMs","err","Error","httpStatus","undefined","groupEnd","demo_logger_levels","reverse","forEach","demo_group","group","groupCollapsed","demo_incorrect_logger_invocations","bob","demo_logger_api","getLogger","suggestedLevel","name","demo_error","bar","statusCode","details","hello","some","demo_devtools_fonts","font","module","exports"],"mappings":"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","file":"src.0be93c93.js","sourceRoot":"../src","sourcesContent":["/* global globalThis, self, window, global */\n\nconst lastResort: { [k:string]: any } = {}\n\nexport default function getGlobalThis(this: any): { [k:string]: any } {\n\n\t// @ts-ignore\n\tif (typeof globalThis !== 'undefined') return globalThis\n\n\t// check node first https://github.com/ljharb/globalThis/issues/2\n\t// @ts-ignore\n\tif (typeof global !== 'undefined') return global\n\n\t// @ts-ignore\n\tif (typeof self !== 'undefined') return self\n\n\t// @ts-ignore\n\tif (typeof window !== 'undefined') return window\n\n\tif (typeof this !== 'undefined') return this\n\n\treturn lastResort // should never happen\n}\n\nexport { getGlobalThis }\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t// TODO an extra \"never\" level?\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { Logger, LoggerCreationParams } from '@offirmo/practical-logger-types'\n\n\nfunction NOP () {}\n\nconst NOP_LOGGER: Logger = {\n\tsetLevel: NOP,\n\tgetLevel: () => 'silly',\n\n\taddCommonDetails: NOP,\n\n\tfatal: NOP,\n\temerg: NOP,\n\talert: NOP,\n\tcrit: NOP,\n\terror: NOP,\n\twarning: NOP,\n\twarn: NOP,\n\tnotice: NOP,\n\tinfo: NOP,\n\tverbose: NOP,\n\tlog: NOP,\n\tdebug: NOP,\n\ttrace: NOP,\n\tsilly: NOP,\n\n\tgroup: NOP,\n\tgroupCollapsed: NOP,\n\tgroupEnd: NOP,\n}\n\nfunction createLogger(_?: any): Logger {\n\treturn NOP_LOGGER\n}\n\nexport {\n\tLogger,\n\tLoggerCreationParams,\n\tcreateLogger,\n}\n","import { DebugApiV1 } from '@offirmo/universal-debug-api-interface'\nimport { createLogger } from '@offirmo/practical-logger-minimal-noop'\n\n\nexport default function create(): DebugApiV1 {\n\t//console.trace('[UDA--placeholder installing…]')\n\n\tfunction NOP () {}\n\tconst NOP_LOGGER = createLogger()\n\n\treturn {\n\t\tgetLogger: () => NOP_LOGGER,\n\t\toverrideHook: (k, v) => v,\n\t\texposeInternal: NOP,\n\t\taddDebugCommand: NOP,\n\t}\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t// TODO an extra \"never\" level?\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { Logger, LoggerCreationParams } from '@offirmo/practical-logger-types'\n\ninterface DebugApi {\n\tgetLogger: (p?: Readonly<LoggerCreationParams>) => Logger\n\n\toverrideHook: <T>(key: string, defaultValue: T) => T\n\n\texposeInternal: (path: string, value: any) => void\n\n\taddDebugCommand: (name: string, callback: ( /* todo common libs as params ? */ ) => void) => void\n\n\t// This is internal, undocumented, should not be used!\n\t// For ex. the placeholder won't feture this\n\t_?: {\n\t\texposed: any\n\t\toverrides: { [k: string]: any }\n\n\t\t// For internal setup debug:\n\t\t// TODO review if really useful\n\t\tminor: number // minor isolated increment as a number, for trivial INTERNAL semver check (of course <99 required)\n\t\t              // this \"minor\" is specific to an implementation, i.e. browser or node\n\t\tsource: string // what installed this lib\n\t\tcreate: () => DebugApi // allows re-creating for special purpose (for now, only the browser extension needs it)\n\t}\n}\n\nexport {\n\tLogger,\n\tLoggerCreationParams,\n\tDebugApi,\n}\n","import { DebugApi as DebugApiV1 } from './v1'\n\ninterface DebugApiRoot {\n\tv1: DebugApiV1,\n}\n\ntype DebugApi = DebugApiV1\n\nexport {\n\tDebugApiV1,\n\n\t// v latest\n\tDebugApi,\n\tDebugApiRoot,\n}\n\n// for convenience\nexport { Logger, LoggerCreationParams } from '@offirmo/practical-logger-types'\n","import { getGlobalThis } from '@offirmo/globalthis-ponyfill'\nimport { DebugApiRoot, DebugApi } from '@offirmo/universal-debug-api-interface'\n\nimport createV1 from './v1'\n\nconst globalThis = getGlobalThis()\n\n// ensure the root is present\nglobalThis._debug = globalThis._debug || {} as DebugApiRoot\n\n// install globally if no other implementation already present\nglobalThis._debug.v1 = globalThis._debug.v1 || createV1()\n\n// expose the installed implementation\nconst instance: DebugApi = globalThis._debug.v1\n\nconst {\n\tgetLogger,\n\texposeInternal,\n\toverrideHook,\n\taddDebugCommand,\n} = instance\n\nexport {\n\tgetLogger,\n\texposeInternal,\n\toverrideHook,\n\taddDebugCommand,\n\n\tglobalThis, // for convenience\n\n\tcreateV1, // for special cases\n}\n\n// types & sub-types, for convenience\nexport * from '@offirmo/universal-debug-api-interface'\n","// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\n\nimport { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = 'error'\nexport const DEFAULT_LOGGER_KEY = '' // yes, can be used as a key\n","import { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const LIB = '@offirmo/practical-logger-core'\n\n// level to a numerical value, for ordering and filtering.\n// mnemonic:  100 = 100% = you will see 100% of the logs\n//              1 =   1% = you will see 1% of the logs (obviously the most important)\nexport const LOG_LEVEL_TO_INTEGER: Readonly<{ [k: string]: number }> = {\n\tfatal:    1,\n\temerg:    2,\n\n\talert:   10,\n\tcrit:    20,\n\terror:   30,\n\n\twarning: 40,\n\twarn:    40,\n\n\tnotice:  45,\n\n\tinfo:    50,\n\n\tverbose: 70,\n\tlog:     80,\n\tdebug:   81,\n\n\ttrace:   90,\n\n\tsilly:  100,\n}\n\nexport const ALL_LOG_LEVELS: Readonly<LogLevel[]> =\n\tObject.keys(LOG_LEVEL_TO_INTEGER)\n\t\t.map(s => s as LogLevel)\n\t\t.sort((a: LogLevel, b: LogLevel) => LOG_LEVEL_TO_INTEGER[a] - LOG_LEVEL_TO_INTEGER[b])\n\n// rationalization to a clear, human understandable string\n// generated to shave a few bytes\n// not using fromEntries bc not available in node <12\nexport const LOG_LEVEL_TO_HUMAN: Readonly<{ [k: string]: string }> = ALL_LOG_LEVELS.reduce((acc, ll) => {\n\tacc[ll] = ({ em: 'emergency', wa: 'warn'} as any)[ll.slice(0, 1)] || ll\n\treturn acc\n}, {} as any)\n\nexport * from './consts-base'\n","import {\n\tLogDetails,\n} from '@offirmo/practical-logger-types'\n\n\nexport function looksLikeAnError(x: any): boolean {\n\treturn !!(x?.name && x?.message && x?.stack)\n}\n\n// harmonize\n// also try to recover from incorrect invocations\nexport function normalizeArguments(raw_args: IArguments): [ string, LogDetails ] {\n\tconst message_parts: string[] = []\n\tlet details: LogDetails = {}\n\tlet err: Error | undefined = undefined\n\n\tArray.from(raw_args)\n\t\t.forEach(arg => {\n\t\t\tif (!arg)\n\t\t\t\treturn\n\n\t\t\t// errors are first class, look for them first\n\t\t\tif (looksLikeAnError(arg)) {\n\t\t\t\tif (!err)\n\t\t\t\t\terr = arg // extract it\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!err && looksLikeAnError(arg.err)) {\n\t\t\t\terr = arg.err // extract it\n\t\t\t\t// don't return, still stuff to pick\n\t\t\t}\n\n\t\t\tif (typeof arg === 'object') {\n\t\t\t\tdetails = {\n\t\t\t\t\t...details,\n\t\t\t\t\t...arg,\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmessage_parts.push(String(arg))\n\t\t})\n\n\tif (typeof details.message === 'string' && !message_parts.length) {\n\t\tmessage_parts.push(details.message)\n\t\tdelete details.message\n\t}\n\n\tconst message = message_parts.join(' ') || (err as any)?.message || '(no message)'\n\tif (err)\n\t\tdetails.err = err\n\telse\n\t\tdelete details.err // because could be present but not be a correct err type\n\n\treturn [ message, details ]\n}\n\n","import {\n\tLogLevel,\n\tBaseInternalLoggerState,\n\tLogger,\n\tLoggerCreationParams,\n\tLogDetails,\n\tLogPayload,\n\tLogPrimitive,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLIB,\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nimport { normalizeArguments } from './normalize-args'\n\nexport function checkLevel(level: any): asserts level is LogLevel {\n\tif (!ALL_LOG_LEVELS.includes(level))\n\t\tthrow new Error(`[${LIB}] Not a valid log level: \"${level}\"!`)\n}\n\nexport function create(\n\t{\n\t\tname = DEFAULT_LOGGER_KEY,\n\t\tsuggestedLevel = DEFAULT_LOG_LEVEL,\n\t\tforcedLevel,\n\t\tcommonDetails = {},\n\t}: LoggerCreationParams = {},\n\toutputFn: LogSink = console.log,\n): Logger {\n\n\tconst internalState: BaseInternalLoggerState = {\n\t\tname,\n\t\tlevel: forcedLevel || suggestedLevel,\n\t\tcommonDetails: {...commonDetails},\n\t\toutputFn,\n\t}\n\n\tlet levelAsInt = 100 // so far\n\n\tconst logger: Logger = ALL_LOG_LEVELS.reduce(\n\t\t(logger: any, level: LogLevel) => {\n\t\t\tconst primitive: LogPrimitive = function (rawMessage?: string, rawDetails?: LogDetails) {\n\t\t\t\tif (!isLevelEnabled(level)) return\n\n\t\t\t\tconst [ message, details ] = normalizeArguments(arguments)\n\n\t\t\t\tinternalState.outputFn(serializer(level, message, details))\n\t\t\t}\n\n\t\t\tlogger[level] = primitive\n\n\t\t\treturn logger\n\t\t},\n\t\t{\n\t\t\tsetLevel,\n\t\t\tgetLevel,\n\t\t\taddCommonDetails,\n\t\t\tgroup() {},\n\t\t\tgroupCollapsed() {},\n\t\t\tgroupEnd() {},\n\t\t},\n\t)\n\n\tfunction setLevel(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\tinternalState.level = level\n\t\tlevelAsInt = LOG_LEVEL_TO_INTEGER[level]\n\t}\n\tsetLevel(getLevel()) // to check it\n\n\tfunction isLevelEnabled(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\treturn LOG_LEVEL_TO_INTEGER[level] <= levelAsInt\n\t}\n\n\tfunction getLevel() {\n\t\treturn internalState.level\n\t}\n\n\tfunction addCommonDetails(details: Readonly<LogDetails>): void {\n\t\tif (details.err)\n\t\t\tthrow new Error(`[${LIB}] Can't set reserved property \"err\"!`)\n\n\t\tinternalState.commonDetails = {\n\t\t\t...internalState.commonDetails,\n\t\t\t...details,\n\t\t}\n\t}\n\n\tfunction serializer(level: LogLevel, msg: string, { err, ...details }: Readonly<LogDetails>): LogPayload {\n\t\tconst payload: LogPayload = {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tmsg,\n\t\t\ttime: +(new Date()), // UTC timestamp\n\t\t\tdetails: {\n\t\t\t\t...internalState.commonDetails,\n\t\t\t\t...details,\n\t\t\t},\n\t\t}\n\t\tif (err)\n\t\t\tpayload.err = err\n\n\t\treturn payload\n\t}\n\n\treturn logger\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t// TODO an extra \"never\" level?\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive,\n\temerg: LogPrimitive,\n\talert: LogPrimitive,\n\tcrit: LogPrimitive,\n\terror: LogPrimitive,\n\twarning: LogPrimitive,\n\twarn: LogPrimitive,\n\tnotice: LogPrimitive,\n\tinfo: LogPrimitive,\n\tverbose: LogPrimitive,\n\tlog: LogPrimitive,\n\tdebug: LogPrimitive,\n\ttrace: LogPrimitive,\n\tsilly: LogPrimitive,\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void;\n\tgroupCollapsed(groupTitle?: string): void;\n\tgroupEnd(): void;\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tlevel: LogLevel\n\tname: string\n\tmsg: string\n\ttime: number // UTC timestamp\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a fn responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","import { create as createLogger } from './core'\nexport { createLogger }\n\nexport * from '@offirmo/practical-logger-types'\n\nexport {\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tLOG_LEVEL_TO_HUMAN,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts'\n\nexport { checkLevel } from './core'\nexport * from './normalize-args'\n\n","const { ALL_LOG_LEVELS } = require('..')\n\nfunction demo_legacy_console() {\n\tconsole.log('------------↓ For comparison: Legacy console: levels, in order ↓-----------')\n\tconsole.debug('Legacy console > message with level \"debug\"', { level: 'debug', foo: 42 })\n\tconsole.log('Legacy console > message with level \"log\"', { level: 'log', foo: 42 })\n\tconsole.info('Legacy console > message with level \"info\"', { level: 'info', foo: 42 })\n\tconsole.warn('Legacy console > message with level \"warn\"', { level: 'warn', foo: 42 })\n\tconsole.error('Legacy console > message with level \"error\"', { level: 'error', foo: 42 })\n}\n\n\nfunction demo_logger_basic_usage(logger, in_group = true) {\n\tconsole[in_group ? 'group' : 'log']('------------↓ Practical logger demo: example real usage ↓------------')\n\n\tlogger.silly('Hi!')\n\tlogger.trace('App starting...', { version: '1.2.3' })\n\n\tconst bob = {\n\t\tfirstName: 'Bob',\n\t\tlastName: 'Dupont',\n\t\tage: 42,\n\t}\n\n\tlogger.verbose('Current user already logged in', { user: bob })\n\n\tlogger.verbose('Restoring state from cloud…')\n\n\tlogger.warn('Restoration of state is taking more time than expected', { elapsedMs: 3000 })\n\n\tconst err = new Error('Timeout loading state!')\n\terr.httpStatus = 418 // to check that custom props are preserved\n\n\tlogger.error(undefined, err)\n\n\tlogger.info('Reverting to last known local state')\n\n\tif (in_group) console.groupEnd()\n}\n\nfunction demo_logger_levels(logger) {\n\tconsole.log('------------↓ Practical logger demo: all levels, in order ↓------------')\n\t;[...ALL_LOG_LEVELS].reverse().forEach(level =>\n\t\tlogger[level](`message with level \"${level}\"`, { level, foo: 42 }),\n\t)\n\n\t/*\nconsole.groupCollapsed('in group')\nALL_LOG_LEVELS.forEach(level =>\n    logger[level](`msg with level \"${level}\"`)\n)\nconsole.groupEnd()\n*/\n}\n\nfunction demo_group(logger) {\n\tconsole.log('------------↓ logger demo: group ↓------------')\n\n\tlogger.group('level 1 (NOT collapsed)')\n\t\tlogger.log('in level 1')\n\n\t\tlogger.groupCollapsed('level 2a (collapsed)')\n\t\t\tlogger.log('in level 2a')\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2b (collapsed)')\n\t\t\t// no output\n\t\t\tlogger.group('level 3a (NOT collapsed)')\n\t\t\t\t// no output\n\t\t\tlogger.groupEnd()\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2c (collapsed)')\n\t\t\t// no output\n\t\t\tlogger.warn('warn from level 2c!')\n\t\t\tlogger.error(new Error('error from level 2c!'))\n\t\tlogger.groupEnd()\n\n\t\tlogger.groupCollapsed('level 2d (collapsed)')\n\t\t\tlogger.log('in level 2d')\n\t\t\tlogger.group('level 3b (NOT collapsed)')\n\t\t\t\tlogger.warn('warn from level 3b!')\n\t\t\t\tlogger.error(new Error('error from level 3b!'))\n\t\t\t\tlogger.log('in level 3b')\n\t\t\tlogger.groupEnd()\n\t\t\tlogger.log('in level 2d')\n\t\tlogger.groupEnd()\n\n\t\tlogger.log('where am I? (should be in level 1)')\n\tlogger.groupEnd()\n\n\tlogger.groupEnd()\n\tlogger.groupEnd()\n}\n\nfunction demo_incorrect_logger_invocations(logger) {\n\tconst bob = {\n\t\tfirstName: 'Bob',\n\t\tlastName: 'Dupont',\n\t\tage: 42,\n\t}\n\n\tconst more = 'some stuff'\n\n\tconst err = new Error('Timeout loading state!')\n\terr.httpStatus = 418 // to check that custom props are preserved\n\n\tconsole.group('------------↓ logger demo: incorrect invocation (bunyan style) ↓------------')\n\tlogger.info()\n\n\tlogger.info('hi')\n\tlogger.info('hi %s', bob, more)\n\n\tlogger.info({foo: 'bar'}, 'hi')\n\n\tlogger.info(err)\n\tlogger.info(err, 'more on this: %s', more)\n\n\tlogger.info({foo: 'bar', err: err}, 'some msg about this error')\n\tlogger.warn('foo', 'bar', 42)\n\tconsole.groupEnd()\n}\n\nfunction demo_logger_api(getLogger) {\n\tconsole.log('------------↓ logger creation and basic usage ↓------------')\n\tconst root_logger = getLogger({\n\t\tsuggestedLevel: 'silly',\n\t})\n\troot_logger.log('Starting up')\n\n\tconst logger = getLogger({\n\t\tname: 'Persistence',\n\t\tsuggestedLevel: 'silly',\n\t})\n\n\tdemo_logger_basic_usage(logger)\n\n\tdemo_logger_levels(logger)\n\n\tdemo_group(logger)\n\n\tdemo_incorrect_logger_invocations(logger)\n}\n\nfunction demo_error(logger, in_group = true) {\n\tconsole[in_group ? 'group' : 'log']('------------↓ logger demo: error display ↓------------')\n\n\tfunction foo() {\n\t\tfunction bar() {\n\t\t\tconst err = new Error('Test error!')\n\t\t\terr.statusCode = 1234\n\t\t\terr.details = {\n\t\t\t\thello: 42,\n\t\t\t}\n\n\t\t\tthrow err\n\t\t}\n\t\tbar()\n\t}\n\n\ttry {\n\t\tfoo()\n\t}\n\tcatch (err) {\n\t\tlogger.log(err)\n\t\tlogger.log('message', err)\n\t\tlogger.log('message', { some: 'stuff', err })\n\t\tlogger.error(err)\n\t\tlogger.error('message', err)\n\t\tlogger.error('message', { some: 'stuff', err })\n\t\t//logger.error('message', { some: 'stuff' }, err)\n\t\t//logger.error('message', err, { some: 'stuff' })\n\t\tlogger.error('message', { some: 'stuff' })\n\t}\n\n\tif (in_group) console.groupEnd()\n}\n\nfunction demo_devtools_fonts() {\n\tconsole.group('------------↓ available font styles ↓------------')\n\tconsole.log('default: ABCdef012')\n\n\t;[\n\t\t'-apple-system',\n\t\t'BlinkMacSystemFont',\n\t\t'\"avenir next\"',\n\t\t'avenir',\n\t\t'\"Segoe UI\"',\n\t\t'\"lucida grande\"',\n\t\t'\"helvetica neue\"',\n\t\t'helvetica',\n\t\t'\"Fira Sans\"',\n\t\t'roboto',\n\t\t//'noto',\n\t\t//'\"Droid Sans\"',\n\t\t//'cantarell',\n\t\t//'oxygen',\n\t\t//'ubuntu',\n\t\t//'\"franklin gothic medium\"',\n\t\t//'\"century gothic\"',\n\t\t'\"Liberation Sans\"',\n\t\t'sans-serif',\n\t\t'\"dejavu sans mono\"',\n\t\t'\"Fira Code\"',\n\t\t'Menlo',\n\t\t'Consolas',\n\t\t'\"Lucida Console\"',\n\t\t'\"Courier New\"',\n\t\t'monospace',\n\t].forEach(font => console.log(`%c${font}: ABCdefi012 %cABCdefi012`, `font-family: ${font};`, 'font-family: unset;'))\n\tconsole.groupEnd()\n}\n\nmodule.exports = {\n\tdemo_legacy_console,\n\tdemo_logger_basic_usage,\n\tdemo_logger_levels,\n\tdemo_error,\n\tdemo_group,\n\tdemo_incorrect_logger_invocations,\n\tdemo_logger_api,\n\tdemo_devtools_fonts,\n}\n","import {\n\tgetLogger,\n\toverrideHook,\n\texposeInternal,\n\taddDebugCommand,\n} from '@offirmo/universal-debug-api-placeholder'\n\n\nimport {\n\tdemo_logger_basic_usage,\n\tdemo_logger_levels,\n\tdemo_error,\n\tdemo_group,\n\tdemo_logger_api,\n\n\tdemo_incorrect_logger_invocations,\n\tdemo_legacy_console,\n\tdemo_devtools_fonts,\n} from '@offirmo/practical-logger-core/doc/shared-demo')\n\n//demo_legacy_console()\n\nconst logger = getLogger({\n\tsuggestedLevel: 'warn',\n})\nlogger.log('hello from logger!')\n\nconst demoLogger = getLogger({\n\tname: 'Demo',\n\tsuggestedLevel: 'silly',\n})\ndemoLogger.log('hello from demoLogger!', { bar: 42, baz: 33 })\n\nconst state = {\n\ttarget: undefined as undefined | 'browser' | 'node' | 'module'\n\tlast_demo_launched: null as null | string\n}\n\nconst target_envs = [\n\t'browser',\n\t'node',\n\t'module'\n]\n\nconst demos = {\n\t'all-levels': (l) => { demo_legacy_console(); demo_logger_levels(l) },\n\t'basic': (l) => demo_logger_basic_usage(l, false),\n\t'error': (l) => demo_error(l, false),\n\t'groups': demo_group,\n]\n\nfunction run_demo(demo_id: string) {\n\tdemos[demo_id](demoLogger)\n\tstate.last_demo_launched = demo_id\n}\n\nfunction render() {\n\tObject.keys(demos).forEach(demo_id => {\n\t\tdocument.getElementById(`demo-${demo_id}`).removeAttribute('open')\n\t})\n\tif (state.last_demo_launched) {\n\t\tdocument.getElementById(`demo-${state.last_demo_launched}`).setAttribute(\"open\", \"true\")\n\t}\n\n\ttarget_envs.forEach(demo_id => {\n\t})\n}\nrender()\n\n/// event delegation\ndocument.addEventListener('click', event => {\n\tresolution: {\n\t\ttry {\n\t\t\tconst { target: clickedElement } = event\n\t\t\tif (!clickedElement)\n\t\t\t\tthrow new Error('click event has no target!')\n\n\t\t\tlet demo_id = Object.keys(demos).find(id => clickedElement.matches(`#btn-demo-${id}`))\n\t\t\tif (demo_id) {\n\t\t\t\trun_demo(demo_id)\n\t\t\t\tbreak resolution\n\t\t\t}\n\n\t\t\tlogger.trace('Event delegation: unknown click target:', { clickedElement })\n\t\t} catch (err) {\n\t\t\tlogger.error('processingClick', { err })\n\t\t}\n\t}\n\n\trender()\n})\n"]}